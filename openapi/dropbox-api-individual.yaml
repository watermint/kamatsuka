openapi: 3.0.3
info:
  title: Dropbox API - Individual
  description: Dropbox API v2 for individual Dropbox accounts. This specification contains only user endpoints that can be called from individual Dropbox accounts without team admin headers.
  version: '2.0'
  contact:
    name: Dropbox API
    url: https://www.dropbox.com/developers
servers:
- url: https://api.dropboxapi.com/2
  description: Dropbox API v2 - API Server
- url: https://content.dropboxcontent.com/2
  description: Dropbox API v2 - Content Server
- url: https://notify.dropboxnotify.com/2
  description: Dropbox API v2 - Notify Server
paths:
  /account/set_profile_photo:
    post:
      summary: Sets a user's profile photo.
      operationId: set_profile_photo
      security:
      - oauth2:
        - account_info.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetProfilePhotoArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetProfilePhotoResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetProfilePhotoError'
      description: Sets a user's profile photo.
  /auth/token/revoke:
    post:
      summary: |-
        Disables the access token used to authenticate the call.
            If there is a corresponding refresh token for the access token,
            this disables that refresh token, as well as any other access tokens for that refresh token.
      operationId: token/revoke
      security:
      - oauth2:
        - account_info.read
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
      description: |-
        Disables the access token used to authenticate the call.
            If there is a corresponding refresh token for the access token,
            this disables that refresh token, as well as any other access tokens for that refresh token.
      x-stone-allow-app-folder: true
  /auth/token/from_oauth1:
    post:
      summary: Creates an OAuth 2.0 access token from the supplied OAuth 1.0 access token.
      operationId: token/from_oauth1
      security:
      - oauth2:
        - account_info.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenFromOAuth1Arg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenFromOAuth1Result'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenFromOAuth1Error'
      description: Creates an OAuth 2.0 access token from the supplied OAuth 1.0 access token.
      x-stone-auth: app
      x-stone-allow-app-folder: true
  /check/user:
    post:
      summary: |-
        This endpoint performs User Authentication, validating the supplied access token,
            and returns the supplied string, to allow you to test your code and connection to the
            Dropbox API. It has no other effect. If you receive an HTTP 200 response with the supplied
            query, it indicates at least part of the Dropbox API infrastructure is working and that the
            access token is valid.
      operationId: user
      security:
      - oauth2:
        - account_info.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EchoArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EchoResult'
      description: |-
        This endpoint performs User Authentication, validating the supplied access token,
            and returns the supplied string, to allow you to test your code and connection to the
            Dropbox API. It has no other effect. If you receive an HTTP 200 response with the supplied
            query, it indicates at least part of the Dropbox API infrastructure is working and that the
            access token is valid.
      x-stone-auth: user
      x-stone-preview: true
      x-stone-allow-app-folder: true
  /check/app:
    post:
      summary: |-
        This endpoint performs App Authentication, validating the supplied app key and secret,
            and returns the supplied string, to allow you to test your code and connection to the
            Dropbox API. It has no other effect. If you receive an HTTP 200 response with the supplied
            query, it indicates at least part of the Dropbox API infrastructure is working and that the
            app key and secret valid.
      operationId: app
      security:
      - oauth2:
        - account_info.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EchoArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EchoResult'
      description: |-
        This endpoint performs App Authentication, validating the supplied app key and secret,
            and returns the supplied string, to allow you to test your code and connection to the
            Dropbox API. It has no other effect. If you receive an HTTP 200 response with the supplied
            query, it indicates at least part of the Dropbox API infrastructure is working and that the
            app key and secret valid.
      x-stone-auth: app
      x-stone-preview: true
      x-stone-allow-app-folder: true
  /contacts/delete_manual_contacts:
    post:
      summary: |-
        Removes all manually added contacts.
            You'll still keep contacts who are on your team or who you imported.
            New contacts will be added when you share.
      operationId: delete_manual_contacts
      security:
      - oauth2:
        - contacts.write
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
      description: |-
        Removes all manually added contacts.
            You'll still keep contacts who are on your team or who you imported.
            New contacts will be added when you share.
  /contacts/delete_manual_contacts_batch:
    post:
      summary: Removes manually added contacts from the given list.
      operationId: delete_manual_contacts_batch
      security:
      - oauth2:
        - contacts.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteManualContactsArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteManualContactsError'
      description: Removes manually added contacts from the given list.
  /file_properties/properties/add:
    post:
      summary: |-
        Add property groups to a Dropbox file. See :route:`templates/add_for_user` or
            :route:`templates/add_for_team` to create new templates.
      operationId: properties/add
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPropertiesArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddPropertiesError'
      description: |-
        Add property groups to a Dropbox file. See :route:`templates/add_for_user` or
            :route:`templates/add_for_team` to create new templates.
  /file_properties/properties/overwrite:
    post:
      summary: |-
        Overwrite property groups associated with a file. This endpoint should be used
            instead of :route:`properties/update` when property groups are being updated via a
            "snapshot" instead of via a "delta". In other words, this endpoint will delete all
            omitted fields from a property group, whereas :route:`properties/update` will only
            delete fields that are explicitly marked for deletion.
      operationId: properties/overwrite
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OverwritePropertyGroupArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPropertyGroupError'
      description: |-
        Overwrite property groups associated with a file. This endpoint should be used
            instead of :route:`properties/update` when property groups are being updated via a
            "snapshot" instead of via a "delta". In other words, this endpoint will delete all
            omitted fields from a property group, whereas :route:`properties/update` will only
            delete fields that are explicitly marked for deletion.
  /file_properties/properties/update:
    post:
      summary: |-
        Add, update or remove properties associated with the supplied file and templates.
            This endpoint should be used instead of :route:`properties/overwrite` when property groups
            are being updated via a "delta" instead of via a "snapshot" . In other words, this endpoint
            will not delete any omitted fields from a property group, whereas :route:`properties/overwrite`
            will delete any fields that are omitted from a property group.
      operationId: properties/update
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePropertiesArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePropertiesError'
      description: |-
        Add, update or remove properties associated with the supplied file and templates.
            This endpoint should be used instead of :route:`properties/overwrite` when property groups
            are being updated via a "delta" instead of via a "snapshot" . In other words, this endpoint
            will not delete any omitted fields from a property group, whereas :route:`properties/overwrite`
            will delete any fields that are omitted from a property group.
  /file_properties/properties/remove:
    post:
      summary: |-
        Permanently removes the specified property group from the file. To remove specific property field key
            value pairs, see :route:`properties/update`.
            To update a template, see
            :route:`templates/update_for_user` or :route:`templates/update_for_team`.
            To remove a template, see
            :route:`templates/remove_for_user` or :route:`templates/remove_for_team`.
      operationId: properties/remove
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemovePropertiesArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemovePropertiesError'
      description: |-
        Permanently removes the specified property group from the file. To remove specific property field key
            value pairs, see :route:`properties/update`.
            To update a template, see
            :route:`templates/update_for_user` or :route:`templates/update_for_team`.
            To remove a template, see
            :route:`templates/remove_for_user` or :route:`templates/remove_for_team`.
  /file_properties/templates/add_for_user:
    post:
      summary: |-
        Add a template associated with a user. See :route:`properties/add` to add properties to a file. This
            endpoint can't be called on a team member or admin's behalf.
      operationId: templates/add_for_user
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTemplateArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTemplateResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyTemplateError'
      description: |-
        Add a template associated with a user. See :route:`properties/add` to add properties to a file. This
            endpoint can't be called on a team member or admin's behalf.
  /file_properties/templates/get_for_user:
    post:
      summary: Get the schema for a specified template. This endpoint can't be called on a team member or admin's behalf.
      operationId: templates/get_for_user
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTemplateArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemplateResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateError'
      description: Get the schema for a specified template. This endpoint can't be called on a team member or admin's behalf.
  /file_properties/templates/update_for_user:
    post:
      summary: |-
        Update a template associated with a user. This route can update the template name,
            the template description and add optional properties to templates. This endpoint can't
            be called on a team member or admin's behalf.
      operationId: templates/update_for_user
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTemplateArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTemplateResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyTemplateError'
      description: |-
        Update a template associated with a user. This route can update the template name,
            the template description and add optional properties to templates. This endpoint can't
            be called on a team member or admin's behalf.
  /file_properties/templates/list_for_user:
    post:
      summary: |-
        Get the template identifiers for a team. To get the schema of
            each template use :route:`templates/get_for_user`. This endpoint can't be
            called on a team member or admin's behalf.
      operationId: templates/list_for_user
      security:
      - oauth2:
        - files.metadata.read
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTemplateResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateError'
      description: |-
        Get the template identifiers for a team. To get the schema of
            each template use :route:`templates/get_for_user`. This endpoint can't be
            called on a team member or admin's behalf.
  /file_properties/templates/remove_for_user:
    post:
      summary: |-
        Permanently removes the specified template created from :route:`templates/add_for_user`.
            All properties associated with the template will also be removed. This action
            cannot be undone.
      operationId: templates/remove_for_user
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveTemplateArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateError'
      description: |-
        Permanently removes the specified template created from :route:`templates/add_for_user`.
            All properties associated with the template will also be removed. This action
            cannot be undone.
  /file_properties/properties/search:
    post:
      summary: Search across property templates for particular property field values.
      operationId: properties/search
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertiesSearchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertiesSearchResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertiesSearchError'
      description: Search across property templates for particular property field values.
  /file_properties/properties/search/continue:
    post:
      summary: |-
        Once a cursor has been retrieved from :route:`properties/search`, use this to paginate through all
            search results.
      operationId: properties/search/continue
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertiesSearchContinueArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertiesSearchResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertiesSearchContinueError'
      description: |-
        Once a cursor has been retrieved from :route:`properties/search`, use this to paginate through all
            search results.
  /file_requests/list:2:
    post:
      summary: |-
        Returns a list of file requests owned by this user. For apps with the app
            folder permission, this will only return file requests with destinations in
            the app folder.
      operationId: list:2
      security:
      - oauth2:
        - file_requests.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFileRequestsArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFileRequestsV2Result'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFileRequestsError'
      description: |-
        Returns a list of file requests owned by this user. For apps with the app
            folder permission, this will only return file requests with destinations in
            the app folder.
      x-stone-allow-app-folder: true
  /file_requests/list/continue:
    post:
      summary: |-
        Once a cursor has been retrieved from :route:`list:2`, use this to paginate through all
            file requests. The cursor must come from a previous call to :route:`list:2` or
            :route:`list/continue`.
      operationId: list/continue
      security:
      - oauth2:
        - file_requests.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFileRequestsContinueArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFileRequestsV2Result'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFileRequestsContinueError'
      description: |-
        Once a cursor has been retrieved from :route:`list:2`, use this to paginate through all
            file requests. The cursor must come from a previous call to :route:`list:2` or
            :route:`list/continue`.
      x-stone-allow-app-folder: true
  /file_requests/list:
    post:
      summary: |-
        Returns a list of file requests owned by this user. For apps with the app
            folder permission, this will only return file requests with destinations in
            the app folder.
      operationId: list
      security:
      - oauth2:
        - file_requests.read
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFileRequestsResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFileRequestsError'
      description: |-
        Returns a list of file requests owned by this user. For apps with the app
            folder permission, this will only return file requests with destinations in
            the app folder.
      x-stone-allow-app-folder: true
  /file_requests/get:
    post:
      summary: Returns the specified file request.
      operationId: get
      security:
      - oauth2:
        - file_requests.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFileRequestArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileRequest'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileRequestError'
      description: Returns the specified file request.
      x-stone-allow-app-folder: true
  /file_requests/create:
    post:
      summary: Creates a file request for this user.
      operationId: create
      security:
      - oauth2:
        - file_requests.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileRequestArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileRequest'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFileRequestError'
      description: Creates a file request for this user.
      x-stone-allow-app-folder: true
  /file_requests/update:
    post:
      summary: Update a file request.
      operationId: update
      security:
      - oauth2:
        - file_requests.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileRequestArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileRequest'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFileRequestError'
      description: Update a file request.
      x-stone-allow-app-folder: true
  /file_requests/count:
    post:
      summary: |-
        Returns the total number of file requests owned by this user. Includes both open and
            closed file requests.
      operationId: count
      security:
      - oauth2:
        - file_requests.read
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountFileRequestsResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountFileRequestsError'
      description: |-
        Returns the total number of file requests owned by this user. Includes both open and
            closed file requests.
      x-stone-allow-app-folder: true
  /file_requests/delete:
    post:
      summary: Delete a batch of closed file requests.
      operationId: delete
      security:
      - oauth2:
        - file_requests.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFileRequestArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFileRequestsResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFileRequestError'
      description: Delete a batch of closed file requests.
      x-stone-allow-app-folder: true
  /file_requests/delete_all_closed:
    post:
      summary: Delete all closed file requests owned by this user.
      operationId: delete_all_closed
      security:
      - oauth2:
        - file_requests.write
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAllClosedFileRequestsResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAllClosedFileRequestsError'
      description: Delete all closed file requests owned by this user.
      x-stone-allow-app-folder: true
  /files/tags/add:
    post:
      summary: Add a tag to an item. A tag is a string. The strings are automatically converted to lowercase letters. No more than 20 tags can be added to a given item.
      operationId: tags/add
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTagArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTagError'
      description: Add a tag to an item. A tag is a string. The strings are automatically converted to lowercase letters. No more than 20 tags can be added to a given item.
      x-stone-auth: user
      x-stone-preview: true
  /files/tags/remove:
    post:
      summary: Remove a tag from an item.
      operationId: tags/remove
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveTagArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveTagError'
      description: Remove a tag from an item.
      x-stone-auth: user
      x-stone-preview: true
  /files/tags/get:
    post:
      summary: Get list of tags assigned to items.
      operationId: tags/get
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTagsArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTagsResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseTagError'
      description: Get list of tags assigned to items.
      x-stone-auth: user
      x-stone-preview: true
  /files/get_metadata:
    post:
      summary: |-
        Returns the metadata for a file or folder. This is an alpha endpoint
            compatible with the properties API.

            Note: Metadata for the root folder is unsupported.
      operationId: get_metadata
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlphaGetMetadataArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlphaGetMetadataError'
      description: |-
        Returns the metadata for a file or folder. This is an alpha endpoint
            compatible with the properties API.

            Note: Metadata for the root folder is unsupported.
      x-stone-preview: true
      x-stone-allow-app-folder: true
  /files/list_folder/longpoll:
    post:
      summary: |-
        A longpoll endpoint to wait for changes on an account. In conjunction with
            :route:`list_folder/continue`, this call gives you a low-latency way to
            monitor an account for file changes. The connection will block until there
            are changes available or a timeout occurs. This endpoint is useful mostly
            for client-side apps. If you're looking for server-side notifications,
            check out our
            :link:`webhooks documentation https://www.dropbox.com/developers/reference/webhooks`.
      operationId: list_folder/longpoll
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFolderLongpollArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFolderLongpollResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFolderLongpollError'
      servers:
      - url: https://notify.dropboxnotify.com/2
        description: Dropbox Notify Server
      description: |-
        A longpoll endpoint to wait for changes on an account. In conjunction with
            :route:`list_folder/continue`, this call gives you a low-latency way to
            monitor an account for file changes. The connection will block until there
            are changes available or a timeout occurs. This endpoint is useful mostly
            for client-side apps. If you're looking for server-side notifications,
            check out our
            :link:`webhooks documentation https://www.dropbox.com/developers/reference/webhooks`.
      x-stone-auth: noauth
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /files/list_folder:
    post:
      summary: |-
        Starts returning the contents of a folder. If the result's :field:`ListFolderResult.has_more`
            field is :val:`true`, call :route:`list_folder/continue` with the returned
            :field:`ListFolderResult.cursor` to retrieve more entries.

            If you're using :field:`ListFolderArg.recursive` set to :val:`true` to keep a local cache of
            the contents of a Dropbox account, iterate through each entry in order and process them as
            follows to keep your local state in sync:

            For each :type:`FileMetadata`, store the new entry at the given path in your local state. If the
            required parent folders don't exist yet, create them. If there's already something else at the
            given path, replace it and remove all its children.

            For each :type:`FolderMetadata`, store the new entry at the given path in your local state. If
            the required parent folders don't exist yet, create them. If there's already something else at
            the given path, replace it but leave the children as they are. Check the new entry's
            :field:`FolderSharingInfo.read_only` and set all its children's read-only statuses to match.

            For each :type:`DeletedMetadata`, if your local state has something at the given path, remove it
            and all its children. If there's nothing at the given path, ignore this entry.

            Note: :type:`auth.RateLimitError` may be returned if multiple :route:`list_folder` or
            :route:`list_folder/continue` calls with same parameters are made simultaneously by same
            API app for same user. If your app implements retry logic, please hold off the retry until
            the previous request finishes.
      operationId: list_folder
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFolderArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFolderResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFolderError'
      description: |-
        Starts returning the contents of a folder. If the result's :field:`ListFolderResult.has_more`
            field is :val:`true`, call :route:`list_folder/continue` with the returned
            :field:`ListFolderResult.cursor` to retrieve more entries.

            If you're using :field:`ListFolderArg.recursive` set to :val:`true` to keep a local cache of
            the contents of a Dropbox account, iterate through each entry in order and process them as
            follows to keep your local state in sync:

            For each :type:`FileMetadata`, store the new entry at the given path in your local state. If the
            required parent folders don't exist yet, create them. If there's already something else at the
            given path, replace it and remove all its children.

            For each :type:`FolderMetadata`, store the new entry at the given path in your local state. If
            the required parent folders don't exist yet, create them. If there's already something else at
            the given path, replace it but leave the children as they are. Check the new entry's
            :field:`FolderSharingInfo.read_only` and set all its children's read-only statuses to match.

            For each :type:`DeletedMetadata`, if your local state has something at the given path, remove it
            and all its children. If there's nothing at the given path, ignore this entry.

            Note: :type:`auth.RateLimitError` may be returned if multiple :route:`list_folder` or
            :route:`list_folder/continue` calls with same parameters are made simultaneously by same
            API app for same user. If your app implements retry logic, please hold off the retry until
            the previous request finishes.
      x-stone-auth: app, user
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /files/list_folder/continue:
    post:
      summary: |-
        Once a cursor has been retrieved from :route:`list_folder`, use this to paginate through all
            files and retrieve updates to the folder, following the same rules as documented for
            :route:`list_folder`.
      operationId: list_folder/continue
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFolderContinueArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFolderResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFolderContinueError'
      description: |-
        Once a cursor has been retrieved from :route:`list_folder`, use this to paginate through all
            files and retrieve updates to the folder, following the same rules as documented for
            :route:`list_folder`.
      x-stone-auth: app, user
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /files/list_folder/get_latest_cursor:
    post:
      summary: |-
        A way to quickly get a cursor for the folder's state. Unlike :route:`list_folder`,
            :route:`list_folder/get_latest_cursor` doesn't return any entries. This endpoint is for app
            which only needs to know about new files and modifications and doesn't need to know about
            files that already exist in Dropbox.
      operationId: list_folder/get_latest_cursor
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFolderArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFolderGetLatestCursorResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFolderError'
      description: |-
        A way to quickly get a cursor for the folder's state. Unlike :route:`list_folder`,
            :route:`list_folder/get_latest_cursor` doesn't return any entries. This endpoint is for app
            which only needs to know about new files and modifications and doesn't need to know about
            files that already exist in Dropbox.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /files/download:
    post:
      summary: Download a file from a user's Dropbox.
      operationId: download
      security:
      - oauth2:
        - files.content.read
      responses:
        '200':
          description: Successful response with file content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Dropbox-API-Result:
              description: The JSON metadata response encoded as a string in this header.
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/FileMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadError'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadArg'
      description: 'Download a file from a user''s Dropbox. Download-style endpoint: Request has JSON parameters in Dropbox-API-Arg header. Response has JSON metadata in Dropbox-API-Result header and binary data in body.'
      x-stone-style: download
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /files/download_zip:
    post:
      summary: |-
        Download a folder from the user's Dropbox, as a zip file. The folder must be less than 20 GB
            in size and any single file within must be less than 4 GB in size. The resulting zip must have
            fewer than 10,000 total file and folder entries, including the top level folder. The input
            cannot be a single file.

            Note: this endpoint does not support HTTP range requests.
      operationId: download_zip
      security:
      - oauth2:
        - files.content.read
      responses:
        '200':
          description: Successful response with file content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Dropbox-API-Result:
              description: The JSON metadata response encoded as a string in this header.
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/DownloadZipResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadZipError'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadZipArg'
      description: |-
        Download a folder from the user's Dropbox, as a zip file. The folder must be less than 20 GB
            in size and any single file within must be less than 4 GB in size. The resulting zip must have
            fewer than 10,000 total file and folder entries, including the top level folder. The input
            cannot be a single file.

            Note: this endpoint does not support HTTP range requests. Download-style endpoint: Request has JSON parameters in Dropbox-API-Arg header. Response has JSON metadata in Dropbox-API-Result header and binary data in body.
      x-stone-style: download
      x-stone-allow-app-folder: true
  /files/export:
    post:
      summary: |-
        Export a file from a user's Dropbox. This route only supports exporting files that cannot be downloaded directly
             and whose :field:`ExportResult.file_metadata` has :field:`ExportInfo.export_as` populated.
      operationId: export
      security:
      - oauth2:
        - files.content.read
      responses:
        '200':
          description: Successful response with file content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Dropbox-API-Result:
              description: The JSON metadata response encoded as a string in this header.
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ExportResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportError'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportArg'
      description: |-
        Export a file from a user's Dropbox. This route only supports exporting files that cannot be downloaded directly
             and whose :field:`ExportResult.file_metadata` has :field:`ExportInfo.export_as` populated. Download-style endpoint: Request has JSON parameters in Dropbox-API-Arg header. Response has JSON metadata in Dropbox-API-Result header and binary data in body.
      x-stone-style: download
      x-stone-preview: true
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /files/upload_session/start_batch:
    post:
      summary: |-
        This route starts batch of upload_sessions. Please refer to `upload_session/start` usage.

            Calls to this endpoint will count as data transport calls for any Dropbox
            Business teams with a limit on the number of data transport calls allowed
            per month. For more information, see the :link:`Data transport limit page
            https://www.dropbox.com/developers/reference/data-transport-limit`.
      operationId: upload_session/start_batch
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadSessionStartBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSessionStartBatchResult'
      description: |-
        This route starts batch of upload_sessions. Please refer to `upload_session/start` usage.

            Calls to this endpoint will count as data transport calls for any Dropbox
            Business teams with a limit on the number of data transport calls allowed
            per month. For more information, see the :link:`Data transport limit page
            https://www.dropbox.com/developers/reference/data-transport-limit`. RPC-style endpoint: Both request and response bodies are JSON.
      x-stone-style: rpc
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/upload_session/start:
    post:
      summary: |-
        Upload sessions allow you to upload a single file in one or more
            requests, for example where the size of the file is greater than 150
            MB.  This call starts a new upload session with the given data. You
            can then use :route:`upload_session/append:2` to add more data and
            :route:`upload_session/finish` to save all the data to a file in
            Dropbox.

            A single request should not upload more than 150 MB. The maximum size of
            a file one can upload to an upload session is 350 GB.

            An upload session can be used for a maximum of 7 days. Attempting
            to use an :field:`UploadSessionStartResult.session_id` with
            :route:`upload_session/append:2` or :route:`upload_session/finish` more
            than 7 days after its creation will return a
            :field:`UploadSessionLookupError.not_found`.

            Calls to this endpoint will count as data transport calls for any Dropbox
            Business teams with a limit on the number of data transport calls allowed
            per month. For more information, see the :link:`Data transport limit page
            https://www.dropbox.com/developers/reference/data-transport-limit`.

            By default, upload sessions require you to send content of the file in sequential order via
            consecutive :route:`upload_session/start`, :route:`upload_session/append:2`,
            :route:`upload_session/finish` calls. For better performance, you can instead optionally use
            a :field:`UploadSessionType.concurrent` upload session. To start a new concurrent session,
            set :field:`UploadSessionStartArg.session_type` to :field:`UploadSessionType.concurrent`.
            After that, you can send file data in concurrent :route:`upload_session/append:2` requests.
            Finally finish the session with :route:`upload_session/finish`.

            There are couple of constraints with concurrent sessions to make them work. You can not send
            data with :route:`upload_session/start` or :route:`upload_session/finish` call, only with
            :route:`upload_session/append:2` call. Also data uploaded in :route:`upload_session/append:2`
            call must be multiple of 4194304 bytes (except for last :route:`upload_session/append:2` with
            :field:`UploadSessionStartArg.close` to :val:`true`, that may contain any remaining data).
      operationId: upload_session/start
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSessionStartResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSessionStartError'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadSessionStartArg'
      description: |-
        Upload sessions allow you to upload a single file in one or more
            requests, for example where the size of the file is greater than 150
            MB.  This call starts a new upload session with the given data. You
            can then use :route:`upload_session/append:2` to add more data and
            :route:`upload_session/finish` to save all the data to a file in
            Dropbox.

            A single request should not upload more than 150 MB. The maximum size of
            a file one can upload to an upload session is 350 GB.

            An upload session can be used for a maximum of 7 days. Attempting
            to use an :field:`UploadSessionStartResult.session_id` with
            :route:`upload_session/append:2` or :route:`upload_session/finish` more
            than 7 days after its creation will return a
            :field:`UploadSessionLookupError.not_found`.

            Calls to this endpoint will count as data transport calls for any Dropbox
            Business teams with a limit on the number of data transport calls allowed
            per month. For more information, see the :link:`Data transport limit page
            https://www.dropbox.com/developers/reference/data-transport-limit`.

            By default, upload sessions require you to send content of the file in sequential order via
            consecutive :route:`upload_session/start`, :route:`upload_session/append:2`,
            :route:`upload_session/finish` calls. For better performance, you can instead optionally use
            a :field:`UploadSessionType.concurrent` upload session. To start a new concurrent session,
            set :field:`UploadSessionStartArg.session_type` to :field:`UploadSessionType.concurrent`.
            After that, you can send file data in concurrent :route:`upload_session/append:2` requests.
            Finally finish the session with :route:`upload_session/finish`.

            There are couple of constraints with concurrent sessions to make them work. You can not send
            data with :route:`upload_session/start` or :route:`upload_session/finish` call, only with
            :route:`upload_session/append:2` call. Also data uploaded in :route:`upload_session/append:2`
            call must be multiple of 4194304 bytes (except for last :route:`upload_session/append:2` with
            :field:`UploadSessionStartArg.close` to :val:`true`, that may contain any remaining data). Upload-style endpoint: Request has JSON parameters in Dropbox-API-Arg header and binary data in body. Response body is JSON.
      x-stone-style: upload
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/upload_session/append:2:
    post:
      summary: |-
        Append more data to an upload session.

            A single request should not upload more than 150 MB. The maximum size of
            a file one can upload to an upload session is 350 GB.

            Calls to this endpoint will count as data transport calls for any Dropbox
            Business teams with a limit on the number of data transport calls allowed
            per month. For more information, see the :link:`Data transport limit page https://www.dropbox.com/developers/reference/data-transport-limit`.
      operationId: upload_session/append:2
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSessionAppendError'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadSessionCursor'
      description: |-
        Append more data to an upload session.

            A single request should not upload more than 150 MB. The maximum size of
            a file one can upload to an upload session is 350 GB.

            Calls to this endpoint will count as data transport calls for any Dropbox
            Business teams with a limit on the number of data transport calls allowed
            per month. For more information, see the :link:`Data transport limit page https://www.dropbox.com/developers/reference/data-transport-limit`. Upload-style endpoint: Request has JSON parameters in Dropbox-API-Arg header and binary data in body. Response body is JSON.
      x-stone-style: upload
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/upload_session/finish:
    post:
      summary: |-
        Finish an upload session and save the uploaded data to the given file
            path.

            A single request should not upload more than 150 MB. The maximum size of
            a file one can upload to an upload session is 350 GB.

            Calls to this endpoint will count as data transport calls for any Dropbox
            Business teams with a limit on the number of data transport calls allowed
            per month. For more information, see the :link:`Data transport limit page https://www.dropbox.com/developers/reference/data-transport-limit`.
      operationId: upload_session/finish
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSessionFinishError'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadSessionFinishArg'
      description: |-
        Finish an upload session and save the uploaded data to the given file
            path.

            A single request should not upload more than 150 MB. The maximum size of
            a file one can upload to an upload session is 350 GB.

            Calls to this endpoint will count as data transport calls for any Dropbox
            Business teams with a limit on the number of data transport calls allowed
            per month. For more information, see the :link:`Data transport limit page https://www.dropbox.com/developers/reference/data-transport-limit`. Upload-style endpoint: Request has JSON parameters in Dropbox-API-Arg header and binary data in body. Response body is JSON.
      x-stone-style: upload
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/upload:
    post:
      summary: |-
        Create a new file with the contents provided in the request. Note that the
            behavior of this alpha endpoint is unstable and subject to change.

            Do not use this to upload a file larger than 150 MB. Instead, create an
            upload session with :route:`upload_session/start`.
      operationId: upload
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadError'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadArg'
      description: |-
        Create a new file with the contents provided in the request. Note that the
            behavior of this alpha endpoint is unstable and subject to change.

            Do not use this to upload a file larger than 150 MB. Instead, create an
            upload session with :route:`upload_session/start`. Upload-style endpoint: Request has JSON parameters in Dropbox-API-Arg header and binary data in body. Response body is JSON.
      x-stone-style: upload
      x-stone-preview: true
      x-stone-allow-app-folder: true
  /files/upload_session/finish_batch:2:
    post:
      summary: |-
        This route helps you commit many files at once into a user's Dropbox. Use
            :route:`upload_session/start` and :route:`upload_session/append:2` to
            upload file contents. We recommend uploading many files in parallel to increase
            throughput. Once the file contents have been uploaded, rather than calling
            :route:`upload_session/finish`, use this route to finish all your upload sessions
            in a single request.

            :field:`UploadSessionStartArg.close` or :field:`UploadSessionAppendArg.close`
            needs to be true for the last
            :route:`upload_session/start` or :route:`upload_session/append:2` call of each upload session. The maximum
            size of a file one can upload to an upload session is 350 GB.

            We allow up to 1000 entries in a single request.

            Calls to this endpoint will count as data transport calls for any Dropbox
            Business teams with a limit on the number of data transport calls allowed
            per month. For more information, see the :link:`Data transport limit page https://www.dropbox.com/developers/reference/data-transport-limit`.
      operationId: upload_session/finish_batch:2
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadSessionFinishBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSessionFinishBatchResult'
      description: |-
        This route helps you commit many files at once into a user's Dropbox. Use
            :route:`upload_session/start` and :route:`upload_session/append:2` to
            upload file contents. We recommend uploading many files in parallel to increase
            throughput. Once the file contents have been uploaded, rather than calling
            :route:`upload_session/finish`, use this route to finish all your upload sessions
            in a single request.

            :field:`UploadSessionStartArg.close` or :field:`UploadSessionAppendArg.close`
            needs to be true for the last
            :route:`upload_session/start` or :route:`upload_session/append:2` call of each upload session. The maximum
            size of a file one can upload to an upload session is 350 GB.

            We allow up to 1000 entries in a single request.

            Calls to this endpoint will count as data transport calls for any Dropbox
            Business teams with a limit on the number of data transport calls allowed
            per month. For more information, see the :link:`Data transport limit page https://www.dropbox.com/developers/reference/data-transport-limit`.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/upload_session/finish_batch/check:
    post:
      summary: |-
        Returns the status of an asynchronous job for :route:`upload_session/finish_batch`. If
            success, it returns list of result for each entry.
      operationId: upload_session/finish_batch/check
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asyncPollArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSessionFinishBatchJobStatus'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncPollError'
      description: |-
        Returns the status of an asynchronous job for :route:`upload_session/finish_batch`. If
            success, it returns list of result for each entry.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/search:2:
    post:
      summary: |-
        Searches for files and folders.

            Note: :route:`search:2` along with :route:`search/continue:2` can only be used to
            retrieve a maximum of 10,000 matches.

            Recent changes may not immediately be reflected in search results due to a short delay in indexing.
            Duplicate results may be returned across pages. Some results may not be returned.
      operationId: search:2
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchV2Arg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchV2Result'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
      description: |-
        Searches for files and folders.

            Note: :route:`search:2` along with :route:`search/continue:2` can only be used to
            retrieve a maximum of 10,000 matches.

            Recent changes may not immediately be reflected in search results due to a short delay in indexing.
            Duplicate results may be returned across pages. Some results may not be returned.
      x-stone-allow-app-folder: true
  /files/search/continue:2:
    post:
      summary: |-
        Fetches the next page of search results returned from :route:`search:2`.

            Note: :route:`search:2` along with :route:`search/continue:2` can only be used to
            retrieve a maximum of 10,000 matches.

            Recent changes may not immediately be reflected in search results due to a short delay in indexing.
            Duplicate results may be returned across pages. Some results may not be returned.
      operationId: search/continue:2
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchV2ContinueArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchV2Result'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
      description: |-
        Fetches the next page of search results returned from :route:`search:2`.

            Note: :route:`search:2` along with :route:`search/continue:2` can only be used to
            retrieve a maximum of 10,000 matches.

            Recent changes may not immediately be reflected in search results due to a short delay in indexing.
            Duplicate results may be returned across pages. Some results may not be returned.
      x-stone-allow-app-folder: true
  /files/create_folder:2:
    post:
      summary: Create a folder at a given path.
      operationId: create_folder:2
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFolderError'
      description: Create a folder at a given path.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/create_folder_batch:
    post:
      summary: |-
        Create multiple folders at once.

            This route is asynchronous for large batches, which returns a job ID immediately and runs
            the create folder batch asynchronously. Otherwise, creates the folders and returns the result
            synchronously for smaller inputs. You can force asynchronous behaviour by using the
            :field:`CreateFolderBatchArg.force_async` flag.  Use :route:`create_folder_batch/check` to check
            the job status.
      operationId: create_folder_batch
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFolderBatchLaunch'
      description: |-
        Create multiple folders at once.

            This route is asynchronous for large batches, which returns a job ID immediately and runs
            the create folder batch asynchronously. Otherwise, creates the folders and returns the result
            synchronously for smaller inputs. You can force asynchronous behaviour by using the
            :field:`CreateFolderBatchArg.force_async` flag.  Use :route:`create_folder_batch/check` to check
            the job status.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/create_folder_batch/check:
    post:
      summary: |-
        Returns the status of an asynchronous job for :route:`create_folder_batch`. If
            success, it returns list of result for each entry.
      operationId: create_folder_batch/check
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asyncPollArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFolderBatchJobStatus'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncPollError'
      description: |-
        Returns the status of an asynchronous job for :route:`create_folder_batch`. If
            success, it returns list of result for each entry.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/delete:2:
    post:
      summary: |-
        Delete the file or folder at a given path.

            If the path is a folder, all its contents will be deleted too.

            A successful response indicates that the file or folder was deleted. The returned metadata will
            be the corresponding :type:`FileMetadata` or :type:`FolderMetadata` for the item at time of
            deletion, and not a :type:`DeletedMetadata` object.
      operationId: delete:2
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteError'
      description: |-
        Delete the file or folder at a given path.

            If the path is a folder, all its contents will be deleted too.

            A successful response indicates that the file or folder was deleted. The returned metadata will
            be the corresponding :type:`FileMetadata` or :type:`FolderMetadata` for the item at time of
            deletion, and not a :type:`DeletedMetadata` object.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/delete_batch:
    post:
      summary: |-
        Delete multiple files/folders at once.

            This route is asynchronous, which returns a job ID immediately and runs
            the delete batch asynchronously. Use :route:`delete_batch/check` to check
            the job status.
      operationId: delete_batch
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBatchLaunch'
      description: |-
        Delete multiple files/folders at once.

            This route is asynchronous, which returns a job ID immediately and runs
            the delete batch asynchronously. Use :route:`delete_batch/check` to check
            the job status.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/delete_batch/check:
    post:
      summary: |-
        Returns the status of an asynchronous job for :route:`delete_batch`. If
            success, it returns list of result for each entry.
      operationId: delete_batch/check
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asyncPollArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBatchJobStatus'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncPollError'
      description: |-
        Returns the status of an asynchronous job for :route:`delete_batch`. If
            success, it returns list of result for each entry.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/permanently_delete:
    post:
      summary: |-
        Permanently delete the file or folder at a given path
            (see https://www.dropbox.com/en/help/40).

            If the given file or folder is not yet deleted, this route will first delete it.
            It is possible for this route to successfully delete, then fail to permanently
            delete.

            Note: This endpoint is only available for Dropbox Business apps.
      operationId: permanently_delete
      security:
      - oauth2:
        - files.permanent_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteError'
      description: |-
        Permanently delete the file or folder at a given path
            (see https://www.dropbox.com/en/help/40).

            If the given file or folder is not yet deleted, this route will first delete it.
            It is possible for this route to successfully delete, then fail to permanently
            delete.

            Note: This endpoint is only available for Dropbox Business apps.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/copy:2:
    post:
      summary: |-
        Copy a file or folder to a different location in the user's Dropbox.

            If the source path is a folder all its contents will be copied.
      operationId: copy:2
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelocationArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelocationError'
      description: |-
        Copy a file or folder to a different location in the user's Dropbox.

            If the source path is a folder all its contents will be copied.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/copy_batch:2:
    post:
      summary: |-
        Copy multiple files or folders to different locations at once in the
            user's Dropbox.

            This route will return job ID immediately and do the async copy job in
            background. Please use :route:`copy_batch/check:1` to check the job status.
      operationId: copy_batch:2
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelocationBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelocationBatchLaunch'
      description: |-
        Copy multiple files or folders to different locations at once in the
            user's Dropbox.

            This route will return job ID immediately and do the async copy job in
            background. Please use :route:`copy_batch/check:1` to check the job status.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/copy_batch/check:2:
    post:
      summary: |-
        Returns the status of an asynchronous job for :route:`copy_batch:1`. If
            success, it returns list of results for each entry.
      operationId: copy_batch/check:2
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asyncPollArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelocationBatchJobStatus'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncPollError'
      description: |-
        Returns the status of an asynchronous job for :route:`copy_batch:1`. If
            success, it returns list of results for each entry.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/move:2:
    post:
      summary: |-
        Move a file or folder to a different location in the user's Dropbox.

            If the source path is a folder all its contents will be moved.
      operationId: move:2
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelocationArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelocationError'
      description: |-
        Move a file or folder to a different location in the user's Dropbox.

            If the source path is a folder all its contents will be moved.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/move_batch:2:
    post:
      summary: |-
        Move multiple files or folders to different locations at once in the
            user's Dropbox.

            This route will return job ID immediately and do the async moving job in
            background. Please use :route:`move_batch/check:1` to check the job status.
      operationId: move_batch:2
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelocationBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelocationBatchLaunch'
      description: |-
        Move multiple files or folders to different locations at once in the
            user's Dropbox.

            This route will return job ID immediately and do the async moving job in
            background. Please use :route:`move_batch/check:1` to check the job status.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/move_batch/check:2:
    post:
      summary: |-
        Returns the status of an asynchronous job for :route:`move_batch:1`. If
            success, it returns list of results for each entry.
      operationId: move_batch/check:2
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asyncPollArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelocationBatchJobStatus'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncPollError'
      description: |-
        Returns the status of an asynchronous job for :route:`move_batch:1`. If
            success, it returns list of results for each entry.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/get_thumbnail:
    post:
      summary: |-
        Get a thumbnail for an image.

            This method currently supports files with the following file extensions:
            jpg, jpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB
            in size won't be converted to a thumbnail.
      operationId: get_thumbnail
      security:
      - oauth2:
        - files.content.read
      responses:
        '200':
          description: Successful response with file content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Dropbox-API-Result:
              description: The JSON metadata response encoded as a string in this header.
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/FileMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThumbnailError'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThumbnailArg'
      description: |-
        Get a thumbnail for an image.

            This method currently supports files with the following file extensions:
            jpg, jpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB
            in size won't be converted to a thumbnail. Download-style endpoint: Request has JSON parameters in Dropbox-API-Arg header. Response has JSON metadata in Dropbox-API-Result header and binary data in body.
      x-stone-style: download
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /files/get_thumbnail_batch:
    post:
      summary: |-
        Get thumbnails for a list of images. We allow up to 25 thumbnails in a single batch.

            This method currently supports files with the following file extensions:
            jpg, jpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB
            in size won't be converted to a thumbnail.
      operationId: get_thumbnail_batch
      security:
      - oauth2:
        - files.content.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetThumbnailBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetThumbnailBatchResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetThumbnailBatchError'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      description: |-
        Get thumbnails for a list of images. We allow up to 25 thumbnails in a single batch.

            This method currently supports files with the following file extensions:
            jpg, jpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB
            in size won't be converted to a thumbnail.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /files/get_thumbnail:2:
    post:
      summary: |-
        Get a thumbnail for an image.

            This method currently supports files with the following file extensions:
            jpg, jpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB
            in size won't be converted to a thumbnail.
      operationId: get_thumbnail:2
      security:
      - oauth2:
        - files.content.read
      responses:
        '200':
          description: Successful response with file content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Dropbox-API-Result:
              description: The JSON metadata response encoded as a string in this header.
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/PreviewResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThumbnailV2Error'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThumbnailV2Arg'
      description: |-
        Get a thumbnail for an image.

            This method currently supports files with the following file extensions:
            jpg, jpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB
            in size won't be converted to a thumbnail. Download-style endpoint: Request has JSON parameters in Dropbox-API-Arg header. Response has JSON metadata in Dropbox-API-Result header and binary data in body.
      x-stone-auth: app, user
      x-stone-style: download
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /files/get_preview:
    post:
      summary: |-
        Get a preview for a file.

            Currently, PDF previews are generated for files with the following extensions:
            .ai, .doc, .docm, .docx, .eps, .gdoc, .gslides, .odp, .odt, .pps, .ppsm, .ppsx, .ppt, .pptm, .pptx, .rtf.

            HTML previews are generated for files with the following extensions: .csv, .ods, .xls, .xlsm, .gsheet, .xlsx.

            Other formats will return an unsupported extension error.
      operationId: get_preview
      security:
      - oauth2:
        - files.content.read
      responses:
        '200':
          description: Successful response with file content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Dropbox-API-Result:
              description: The JSON metadata response encoded as a string in this header.
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/FileMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewError'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreviewArg'
      description: |-
        Get a preview for a file.

            Currently, PDF previews are generated for files with the following extensions:
            .ai, .doc, .docm, .docx, .eps, .gdoc, .gslides, .odp, .odt, .pps, .ppsm, .ppsx, .ppt, .pptm, .pptx, .rtf.

            HTML previews are generated for files with the following extensions: .csv, .ods, .xls, .xlsm, .gsheet, .xlsx.

            Other formats will return an unsupported extension error. Download-style endpoint: Request has JSON parameters in Dropbox-API-Arg header. Response has JSON metadata in Dropbox-API-Result header and binary data in body.
      x-stone-style: download
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /files/list_revisions:
    post:
      summary: |-
        Returns revisions for files based on a file path or a file id. The file path or file id is
            identified from the latest file entry at the given file path or id. This end point allows your
            app to query either by file path or file id by setting the mode parameter appropriately.

            In the :field:`ListRevisionsMode.path` (default) mode, all revisions at the same
            file path as the latest file entry are
            returned. If revisions with the same file id are desired, then mode must be set to
            :field:`ListRevisionsMode.id`. The :field:`ListRevisionsMode.id` mode is useful to retrieve
            revisions for a given file across moves or renames.
      operationId: list_revisions
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRevisionsArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRevisionsResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRevisionsError'
      description: |-
        Returns revisions for files based on a file path or a file id. The file path or file id is
            identified from the latest file entry at the given file path or id. This end point allows your
            app to query either by file path or file id by setting the mode parameter appropriately.

            In the :field:`ListRevisionsMode.path` (default) mode, all revisions at the same
            file path as the latest file entry are
            returned. If revisions with the same file id are desired, then mode must be set to
            :field:`ListRevisionsMode.id`. The :field:`ListRevisionsMode.id` mode is useful to retrieve
            revisions for a given file across moves or renames.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /files/restore:
    post:
      summary: Restore a specific revision of a file to the given path.
      operationId: restore
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoreError'
      description: Restore a specific revision of a file to the given path.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /files/get_temporary_link:
    post:
      summary: |-
        Get a temporary link to stream content of a file. This link will expire in four hours and
            afterwards you will get 410 Gone. This URL should not be used to display content directly
            in the browser. The Content-Type of the link is determined automatically by the file's mime type.
      operationId: get_temporary_link
      security:
      - oauth2:
        - files.content.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTemporaryLinkArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemporaryLinkResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemporaryLinkError'
      description: |-
        Get a temporary link to stream content of a file. This link will expire in four hours and
            afterwards you will get 410 Gone. This URL should not be used to display content directly
            in the browser. The Content-Type of the link is determined automatically by the file's mime type.
      x-stone-allow-app-folder: true
  /files/get_temporary_upload_link:
    post:
      summary: "Get a one-time use temporary upload link to upload a file to a Dropbox location.\n\n\n    This endpoint acts as a delayed :route:`upload`. The returned temporary upload link may be used\n    to make a POST request with the data to be uploaded. The upload will then be perfomed with the\n    :type:`CommitInfo` previously provided to :route:`get_temporary_upload_link` but evaluated only\n    upon consumption. Hence, errors stemming from invalid :type:`CommitInfo` with respect to the\n    state of the user's Dropbox will only be communicated at consumption time. Additionally, these\n    errors are surfaced as generic HTTP 409 Conflict responses, potentially hiding issue details.\n    The maximum temporary upload link duration is 4 hours. Upon consumption or expiration,\n    a new link will have to be generated. Multiple links may exist for a specific upload path\n    at any given time.\n\n\n    The POST request on the temporary upload link must have its Content-Type\n    set to \"application/octet-stream\".\n\n\n    Example temporary upload link consumption request:\n\n\n    curl -X POST https://content.dropboxapi.com/apitul/1/bNi2uIYF51cVBND\n\n    --header \"Content-Type: application/octet-stream\"\n\n    --data-binary @local_file.txt\n\n\n    A successful temporary upload link consumption request returns the content hash\n    of the uploaded data in JSON format.\n\n\n    Example successful temporary upload link consumption response:\n\n    {\"content-hash\": \"599d71033d700ac892a0e48fa61b125d2f5994\"}\n\n\n    An unsuccessful temporary upload link consumption request returns any of the following status\n    codes:\n\n\n    HTTP 400 Bad Request: Content-Type is not one of\n    application/octet-stream and text/plain or request is invalid.\n\n    HTTP 409 Conflict: The temporary upload link does not exist or is currently unavailable,\n    the upload failed, or another error happened.\n\n    HTTP 410 Gone: The temporary upload link is expired or consumed.\n\n\n    Example unsuccessful temporary upload link consumption response:\n\n    Temporary upload link has been recently consumed.\n    "
      operationId: get_temporary_upload_link
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTemporaryUploadLinkArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemporaryUploadLinkResult'
      description: "Get a one-time use temporary upload link to upload a file to a Dropbox location.\n\n\n    This endpoint acts as a delayed :route:`upload`. The returned temporary upload link may be used\n    to make a POST request with the data to be uploaded. The upload will then be perfomed with the\n    :type:`CommitInfo` previously provided to :route:`get_temporary_upload_link` but evaluated only\n    upon consumption. Hence, errors stemming from invalid :type:`CommitInfo` with respect to the\n    state of the user's Dropbox will only be communicated at consumption time. Additionally, these\n    errors are surfaced as generic HTTP 409 Conflict responses, potentially hiding issue details.\n    The maximum temporary upload link duration is 4 hours. Upon consumption or expiration,\n    a new link will have to be generated. Multiple links may exist for a specific upload path\n    at any given time.\n\n\n    The POST request on the temporary upload link must have its Content-Type\n    set to \"application/octet-stream\".\n\n\n    Example temporary upload link consumption request:\n\n\n    curl -X POST https://content.dropboxapi.com/apitul/1/bNi2uIYF51cVBND\n\n    --header \"Content-Type: application/octet-stream\"\n\n    --data-binary @local_file.txt\n\n\n    A successful temporary upload link consumption request returns the content hash\n    of the uploaded data in JSON format.\n\n\n    Example successful temporary upload link consumption response:\n\n    {\"content-hash\": \"599d71033d700ac892a0e48fa61b125d2f5994\"}\n\n\n    An unsuccessful temporary upload link consumption request returns any of the following status\n    codes:\n\n\n    HTTP 400 Bad Request: Content-Type is not one of\n    application/octet-stream and text/plain or request is invalid.\n\n    HTTP 409 Conflict: The temporary upload link does not exist or is currently unavailable,\n    the upload failed, or another error happened.\n\n    HTTP 410 Gone: The temporary upload link is expired or consumed.\n\n\n    Example unsuccessful temporary upload link consumption response:\n\n    Temporary upload link has been recently consumed.\n    "
      x-stone-allow-app-folder: true
  /files/copy_reference/get:
    post:
      summary: |-
        Get a copy reference to a file or folder. This reference string can be used to
            save that file or folder to another user's Dropbox by passing it to
            :route:`copy_reference/save`.
      operationId: copy_reference/get
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCopyReferenceArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCopyReferenceResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCopyReferenceError'
      description: |-
        Get a copy reference to a file or folder. This reference string can be used to
            save that file or folder to another user's Dropbox by passing it to
            :route:`copy_reference/save`.
      x-stone-allow-app-folder: true
  /files/copy_reference/save:
    post:
      summary: Save a copy reference returned by :route:`copy_reference/get` to the user's Dropbox.
      operationId: copy_reference/save
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveCopyReferenceArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveCopyReferenceResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveCopyReferenceError'
      description: Save a copy reference returned by :route:`copy_reference/get` to the user's Dropbox.
      x-stone-allow-app-folder: true
  /files/save_url:
    post:
      summary: |-
        Save the data from a specified URL into a file in user's Dropbox.

            Note that the transfer from the URL must complete within 15 minutes, or the
            operation will time out and the job will fail.

            If the given path already exists, the file will be renamed to avoid the
            conflict (e.g. myfile (1).txt).
      operationId: save_url
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveUrlArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUrlResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUrlError'
      description: |-
        Save the data from a specified URL into a file in user's Dropbox.

            Note that the transfer from the URL must complete within 15 minutes, or the
            operation will time out and the job will fail.

            If the given path already exists, the file will be renamed to avoid the
            conflict (e.g. myfile (1).txt).
      x-stone-allow-app-folder: true
  /files/save_url/check_job_status:
    post:
      summary: Check the status of a :route:`save_url` job.
      operationId: save_url/check_job_status
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asyncPollArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveUrlJobStatus'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncPollError'
      description: Check the status of a :route:`save_url` job.
      x-stone-allow-app-folder: true
  /files/properties/add:
    post:
      summary: Execute properties/add
      operationId: properties/add
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filepropertiesAddPropertiesArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filepropertiesAddPropertiesError'
      description: Execute properties/add
  /files/properties/overwrite:
    post:
      summary: Execute properties/overwrite
      operationId: properties/overwrite
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filepropertiesOverwritePropertyGroupArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filepropertiesInvalidPropertyGroupError'
      description: Execute properties/overwrite
  /files/properties/update:
    post:
      summary: Execute properties/update
      operationId: properties/update
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filepropertiesUpdatePropertiesArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filepropertiesUpdatePropertiesError'
      description: Execute properties/update
  /files/properties/remove:
    post:
      summary: Execute properties/remove
      operationId: properties/remove
      security:
      - oauth2:
        - files.metadata.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filepropertiesRemovePropertiesArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filepropertiesRemovePropertiesError'
      description: Execute properties/remove
  /files/properties/template/get:
    post:
      summary: Execute properties/template/get
      operationId: properties/template/get
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filepropertiesGetTemplateArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filepropertiesGetTemplateResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filepropertiesTemplateError'
      description: Execute properties/template/get
  /files/properties/template/list:
    post:
      summary: Execute properties/template/list
      operationId: properties/template/list
      security:
      - oauth2:
        - files.metadata.read
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filepropertiesListTemplateResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filepropertiesTemplateError'
      description: Execute properties/template/list
  /files/lock_file_batch:
    post:
      summary: "\n    Lock the files at the given paths. A locked file will be writable only by the lock holder.\n    A successful response indicates that the file has been locked. Returns a list of the\n    locked file paths and their metadata after this operation.\n    "
      operationId: lock_file_batch
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockFileBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockFileBatchResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockFileError'
      description: "\n    Lock the files at the given paths. A locked file will be writable only by the lock holder.\n    A successful response indicates that the file has been locked. Returns a list of the\n    locked file paths and their metadata after this operation.\n    "
  /files/unlock_file_batch:
    post:
      summary: "\n    Unlock the files at the given paths. A locked file can only be unlocked by the lock holder\n    or, if a business account, a team admin. A successful response indicates that the file has\n    been unlocked. Returns a list of the unlocked file paths and their metadata after\n    this operation.\n    "
      operationId: unlock_file_batch
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlockFileBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockFileBatchResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockFileError'
      description: "\n    Unlock the files at the given paths. A locked file can only be unlocked by the lock holder\n    or, if a business account, a team admin. A successful response indicates that the file has\n    been unlocked. Returns a list of the unlocked file paths and their metadata after\n    this operation.\n    "
      x-stone-select-admin-mode: whole_team
  /files/get_file_lock_batch:
    post:
      summary: "\n    Return the lock metadata for the given list of paths.\n    "
      operationId: get_file_lock_batch
      security:
      - oauth2:
        - files.content.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockFileBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockFileBatchResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockFileError'
      description: "\n    Return the lock metadata for the given list of paths.\n    "
  /files/paper/create:
    post:
      summary: "\n    Creates a new Paper doc with the provided content.\n    "
      operationId: paper/create
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaperCreateResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaperCreateError'
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaperCreateArg'
      description: |2-

            Creates a new Paper doc with the provided content.
             Upload-style endpoint: Request has JSON parameters in Dropbox-API-Arg header and binary data in body. Response body is JSON.
      x-stone-style: upload
      x-stone-preview: true
  /files/paper/update:
    post:
      summary: "\n    Updates an existing Paper doc with the provided content.\n    "
      operationId: paper/update
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaperUpdateResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaperUpdateError'
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaperUpdateArg'
      description: |2-

            Updates an existing Paper doc with the provided content.
             Upload-style endpoint: Request has JSON parameters in Dropbox-API-Arg header and binary data in body. Response body is JSON.
      x-stone-style: upload
      x-stone-preview: true
  /openid/userinfo:
    post:
      summary: |-
        This route is used for refreshing the info that is found in the id_token during the OIDC flow.
            This route doesn't require any arguments and will use the scopes approved for the given access token.
      operationId: userinfo
      security:
      - oauth2:
        - openid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoError'
      description: |-
        This route is used for refreshing the info that is found in the id_token during the OIDC flow.
            This route doesn't require any arguments and will use the scopes approved for the given access token.
      x-stone-auth: user
      x-stone-preview: true
      x-stone-allow-app-folder: true
  /paper/docs/folder_users/list:
    post:
      summary: |-
        Lists the users who are explicitly invited to the Paper folder in which the Paper doc
            is contained. For private folders all users (including owner) shared on the folder
            are listed and for team folders all non-team users shared on the folder are returned.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/folder_users/list
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsersOnFolderArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersOnFolderResponse'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocLookupError'
      description: |-
        Lists the users who are explicitly invited to the Paper folder in which the Paper doc
            is contained. For private folders all users (including owner) shared on the folder
            are listed and for team folders all non-team users shared on the folder are returned.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/folder_users/list/continue:
    post:
      summary: |-
        Once a cursor has been retrieved from :route:`docs/folder_users/list`, use this to
            paginate through all users on the Paper folder.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/folder_users/list/continue
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsersOnFolderContinueArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersOnFolderResponse'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersCursorError'
      description: |-
        Once a cursor has been retrieved from :route:`docs/folder_users/list`, use this to
            paginate through all users on the Paper folder.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/sharing_policy/get:
    post:
      summary: |-
        Gets the default sharing policy for the given Paper doc.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/sharing_policy/get
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefPaperDoc'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingPolicy'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocLookupError'
      description: |-
        Gets the default sharing policy for the given Paper doc.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/sharing_policy/set:
    post:
      summary: |-
        Sets the default sharing policy for the given Paper doc. The default 'team_sharing_policy'
            can be changed only by teams, omit this field for personal accounts.

            The 'public_sharing_policy' policy can't be set to the value 'disabled' because this setting
            can be changed only via the team admin console.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/sharing_policy/set
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaperDocSharingPolicy'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocLookupError'
      description: |-
        Sets the default sharing policy for the given Paper doc. The default 'team_sharing_policy'
            can be changed only by teams, omit this field for personal accounts.

            The 'public_sharing_policy' policy can't be set to the value 'disabled' because this setting
            can be changed only via the team admin console.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/archive:
    post:
      summary: |-
        Marks the given Paper doc as archived.

            This action can be performed or undone by anyone with edit permissions to the doc.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            This endpoint will be retired in September 2020. Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for more information.
      operationId: docs/archive
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefPaperDoc'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocLookupError'
      description: |-
        Marks the given Paper doc as archived.

            This action can be performed or undone by anyone with edit permissions to the doc.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            This endpoint will be retired in September 2020. Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for more information.
  /paper/docs/permanently_delete:
    post:
      summary: |-
        Permanently deletes the given Paper doc. This operation is final as the doc
            cannot be recovered.

            This action can be performed only by the doc owner.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/permanently_delete
      security:
      - oauth2:
        - files.permanent_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefPaperDoc'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocLookupError'
      description: |-
        Permanently deletes the given Paper doc. This operation is final as the doc
            cannot be recovered.

            This action can be performed only by the doc owner.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/download:
    post:
      summary: |-
        Exports and downloads Paper doc either as HTML or markdown.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/download
      security:
      - oauth2:
        - files.content.read
      responses:
        '200':
          description: Successful response with file content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Dropbox-API-Result:
              description: The JSON metadata response encoded as a string in this header.
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/PaperDocExportResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocLookupError'
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaperDocExport'
      description: |-
        Exports and downloads Paper doc either as HTML or markdown.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information. Download-style endpoint: Request has JSON parameters in Dropbox-API-Arg header. Response has JSON metadata in Dropbox-API-Result header and binary data in body.
      x-stone-style: download
  /paper/docs/get_folder_info:
    post:
      summary: |-
        Retrieves folder information for the given Paper doc. This includes:

              - folder sharing policy; permissions for subfolders are set by the top-level folder.

              - full 'filepath', i.e. the list of folders (both folderId and folderName) from
                the root folder to the folder directly containing the Paper doc.


            If the Paper doc is not in any folder (aka unfiled) the response will be empty.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/get_folder_info
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefPaperDoc'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersContainingPaperDoc'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocLookupError'
      description: |-
        Retrieves folder information for the given Paper doc. This includes:

              - folder sharing policy; permissions for subfolders are set by the top-level folder.

              - full 'filepath', i.e. the list of folders (both folderId and folderName) from
                the root folder to the folder directly containing the Paper doc.


            If the Paper doc is not in any folder (aka unfiled) the response will be empty.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/users/add:
    post:
      summary: |-
        Allows an owner or editor to add users to a Paper doc or change their permissions
            using their email address or Dropbox account ID.

            The doc owner's permissions cannot be changed.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/users/add
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPaperDocUser'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List(AddPaperDocUserMemberResult)'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocLookupError'
      description: |-
        Allows an owner or editor to add users to a Paper doc or change their permissions
            using their email address or Dropbox account ID.

            The doc owner's permissions cannot be changed.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/users/remove:
    post:
      summary: |-
        Allows an owner or editor to remove users from a Paper doc using their email address or
            Dropbox account ID.

            The doc owner cannot be removed.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/users/remove
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemovePaperDocUser'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocLookupError'
      description: |-
        Allows an owner or editor to remove users from a Paper doc using their email address or
            Dropbox account ID.

            The doc owner cannot be removed.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/users/list:
    post:
      summary: |-
        Lists all users who visited the Paper doc or users with explicit access. This call
            excludes users who have been removed. The list is sorted by the date of the visit or
            the share date.

            The list will include both users, the explicitly shared ones as well as those
            who came in using the Paper url link.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/users/list
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsersOnPaperDocArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersOnPaperDocResponse'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocLookupError'
      description: |-
        Lists all users who visited the Paper doc or users with explicit access. This call
            excludes users who have been removed. The list is sorted by the date of the visit or
            the share date.

            The list will include both users, the explicitly shared ones as well as those
            who came in using the Paper url link.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/users/list/continue:
    post:
      summary: |-
        Once a cursor has been retrieved from :route:`docs/users/list`, use this to
            paginate through all users on the Paper doc.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/users/list/continue
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsersOnPaperDocContinueArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersOnPaperDocResponse'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersCursorError'
      description: |-
        Once a cursor has been retrieved from :route:`docs/users/list`, use this to
            paginate through all users on the Paper doc.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/list:
    post:
      summary: |-
        Return the list of all Paper docs according to the argument specifications. To iterate
            over through the full pagination, pass the cursor to :route:`docs/list/continue`.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/list
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListPaperDocsArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPaperDocsResponse'
      description: |-
        Return the list of all Paper docs according to the argument specifications. To iterate
            over through the full pagination, pass the cursor to :route:`docs/list/continue`.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/list/continue:
    post:
      summary: |-
        Once a cursor has been retrieved from :route:`docs/list`, use this to
            paginate through all Paper doc.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: docs/list/continue
      security:
      - oauth2:
        - files.metadata.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListPaperDocsContinueArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPaperDocsResponse'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDocsCursorError'
      description: |-
        Once a cursor has been retrieved from :route:`docs/list`, use this to
            paginate through all Paper doc.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /paper/docs/create:
    post:
      summary: |-
        Creates a new Paper doc with the provided content.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            This endpoint will be retired in September 2020. Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for more information.
      operationId: docs/create
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaperDocCreateUpdateResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaperDocCreateError'
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaperDocCreateArgs'
      description: |-
        Creates a new Paper doc with the provided content.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            This endpoint will be retired in September 2020. Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for more information. Upload-style endpoint: Request has JSON parameters in Dropbox-API-Arg header and binary data in body. Response body is JSON.
      x-stone-style: upload
  /paper/docs/update:
    post:
      summary: |-
        Updates an existing Paper doc with the provided content.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            This endpoint will be retired in September 2020. Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for more information.
      operationId: docs/update
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaperDocCreateUpdateResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaperDocUpdateError'
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaperDocUpdateArgs'
      description: |-
        Updates an existing Paper doc with the provided content.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            This endpoint will be retired in September 2020. Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for more information. Upload-style endpoint: Request has JSON parameters in Dropbox-API-Arg header and binary data in body. Response body is JSON.
      x-stone-style: upload
  /paper/folders/create:
    post:
      summary: |-
        Create a new Paper folder with the provided info.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
      operationId: folders/create
      security:
      - oauth2:
        - files.content.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaperFolderCreateArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaperFolderCreateResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaperFolderCreateError'
      description: |-
        Create a new Paper folder with the provided info.

            Note that this endpoint will continue to work for content created by users on the older version of Paper. To check which version of Paper a user is on, use /users/features/get_values. If the paper_as_files feature is enabled, then the user is running the new version of Paper.

            Refer to the :link:`Paper Migration Guide https://www.dropbox.com/lp/developers/reference/paper-migration-guide` for migration information.
  /sharing/get_shared_link_metadata:
    post:
      summary: Get the shared link's metadata.
      operationId: get_shared_link_metadata
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSharedLinkMetadataArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkError'
      description: Get the shared link's metadata.
      x-stone-auth: app, user
      x-stone-allow-app-folder: true
  /sharing/list_shared_links:
    post:
      summary: |-
        Returns a list of :type:`LinkMetadata` objects for this user,
            including collection links.

            If no path is given, returns a list of all shared links for the current
            user, including collection links, up to a maximum of 1000 links.

            If a non-empty path is given, returns a list of all shared links
            that allow access to the given path.  Collection links are never
            returned in this case.
      operationId: list_shared_links
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSharedLinksArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSharedLinksResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSharedLinksError'
      description: |-
        Returns a list of :type:`LinkMetadata` objects for this user,
            including collection links.

            If no path is given, returns a list of all shared links for the current
            user, including collection links, up to a maximum of 1000 links.

            If a non-empty path is given, returns a list of all shared links
            that allow access to the given path.  Collection links are never
            returned in this case.
      x-stone-allow-app-folder: true
  /sharing/modify_shared_link_settings:
    post:
      summary: |-
        Modify the shared link's settings.

            If the requested visibility conflict with the shared links policy of the team or the
            shared folder (in case the linked file is part of a shared folder) then the
            :field:`LinkPermissions.resolved_visibility` of the returned :type:`SharedLinkMetadata` will
            reflect the actual visibility of the shared link and the
            :field:`LinkPermissions.requested_visibility` will reflect the requested visibility.
      operationId: modify_shared_link_settings
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifySharedLinkSettingsArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifySharedLinkSettingsError'
      description: |-
        Modify the shared link's settings.

            If the requested visibility conflict with the shared links policy of the team or the
            shared folder (in case the linked file is part of a shared folder) then the
            :field:`LinkPermissions.resolved_visibility` of the returned :type:`SharedLinkMetadata` will
            reflect the actual visibility of the shared link and the
            :field:`LinkPermissions.requested_visibility` will reflect the requested visibility.
      x-stone-allow-app-folder: true
  /sharing/create_shared_link_with_settings:
    post:
      summary: |-
        Create a shared link.

            If a shared link already exists for the given path, that link is returned.

            Previously, it was technically possible to break a shared link by moving or
            renaming the corresponding file or folder. In the future, this will no
            longer be the case, so your app shouldn't rely on this behavior. Instead, if
            your app needs to revoke a shared link, use :route:`revoke_shared_link`.
      operationId: create_shared_link_with_settings
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSharedLinkArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathLinkMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSharedLinkError'
      description: |-
        Create a shared link.

            If a shared link already exists for the given path, that link is returned.

            Previously, it was technically possible to break a shared link by moving or
            renaming the corresponding file or folder. In the future, this will no
            longer be the case, so your app shouldn't rely on this behavior. Instead, if
            your app needs to revoke a shared link, use :route:`revoke_shared_link`.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /sharing/revoke_shared_link:
    post:
      summary: |-
        Revoke a shared link.

            Note that even after revoking a shared link to a file, the file may be accessible if there are
            shared links leading to any of the file parent folders. To list all shared links that enable
            access to a specific file, you can use the :route:`list_shared_links` with the file as the
            :field:`ListSharedLinksArg.path` argument.
      operationId: revoke_shared_link
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeSharedLinkArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeSharedLinkError'
      description: |-
        Revoke a shared link.

            Note that even after revoking a shared link to a file, the file may be accessible if there are
            shared links leading to any of the file parent folders. To list all shared links that enable
            access to a specific file, you can use the :route:`list_shared_links` with the file as the
            :field:`ListSharedLinksArg.path` argument.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: team_admin
  /sharing/get_shared_link_file:
    post:
      summary: Download the shared link's file from a user's Dropbox.
      operationId: get_shared_link_file
      security:
      - oauth2:
        - sharing.read
      responses:
        '200':
          description: Successful response with file content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Dropbox-API-Result:
              description: The JSON metadata response encoded as a string in this header.
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/SharedLinkMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSharedLinkFileError'
      servers:
      - url: https://content.dropboxcontent.com/2
        description: Dropbox Content Server
      parameters:
      - name: Dropbox-API-Arg
        in: header
        description: The request parameters as a JSON encoded string in this header.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSharedLinkFileArg'
      description: 'Download the shared link''s file from a user''s Dropbox. Download-style endpoint: Request has JSON parameters in Dropbox-API-Arg header. Response has JSON metadata in Dropbox-API-Result header and binary data in body.'
      x-stone-style: download
      x-stone-allow-app-folder: true
  /sharing/add_file_member:
    post:
      summary: Adds specified members to a file.
      operationId: add_file_member
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFileMemberArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List(FileMemberActionResult)'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddFileMemberError'
      description: Adds specified members to a file.
      x-stone-select-admin-mode: team_admin
  /sharing/update_file_member:
    post:
      summary: Changes a member's access on a shared file.
      operationId: update_file_member
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileMemberArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberAccessLevelResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMemberActionError'
      description: Changes a member's access on a shared file.
      x-stone-select-admin-mode: team_admin
  /sharing/get_file_metadata:
    post:
      summary: Returns shared file metadata.
      operationId: get_file_metadata
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFileMetadataArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedFileMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileMetadataError'
      description: Returns shared file metadata.
      x-stone-select-admin-mode: team_admin
  /sharing/get_file_metadata/batch:
    post:
      summary: Returns shared file metadata.
      operationId: get_file_metadata/batch
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFileMetadataBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List(GetFileMetadataBatchResult)'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingUserError'
      description: Returns shared file metadata.
  /sharing/list_file_members:
    post:
      summary: |-
        Use to obtain the members who have been invited to a file, both inherited
            and uninherited members.
      operationId: list_file_members
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFileMembersArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedFileMembers'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFileMembersError'
      description: |-
        Use to obtain the members who have been invited to a file, both inherited
            and uninherited members.
      x-stone-select-admin-mode: team_admin
  /sharing/list_file_members/batch:
    post:
      summary: |-
        Get members of multiple files at once. The arguments
            to this route are more limited, and the limit on query result size per file
            is more strict. To customize the results more, use the individual file
            endpoint.

            Inherited users and groups are not included in the result, and permissions are not
            returned for this endpoint.
      operationId: list_file_members/batch
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFileMembersBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List(ListFileMembersBatchResult)'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingUserError'
      description: |-
        Get members of multiple files at once. The arguments
            to this route are more limited, and the limit on query result size per file
            is more strict. To customize the results more, use the individual file
            endpoint.

            Inherited users and groups are not included in the result, and permissions are not
            returned for this endpoint.
  /sharing/list_file_members/continue:
    post:
      summary: |-
        Once a cursor has been retrieved from :route:`list_file_members` or
            :route:`list_file_members/batch`, use this to paginate through all shared
            file members.
      operationId: list_file_members/continue
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFileMembersContinueArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedFileMembers'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFileMembersContinueError'
      description: |-
        Once a cursor has been retrieved from :route:`list_file_members` or
            :route:`list_file_members/batch`, use this to paginate through all shared
            file members.
  /sharing/list_received_files:
    post:
      summary: |-
        Returns a list of all files shared with current user.

             Does not include files the user has received via shared folders, and does
             not include unclaimed invitations.
      operationId: list_received_files
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFilesArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingUserError'
      description: |-
        Returns a list of all files shared with current user.

             Does not include files the user has received via shared folders, and does
             not include unclaimed invitations.
      x-stone-select-admin-mode: team_admin
  /sharing/list_received_files/continue:
    post:
      summary: Get more results with a cursor from :route:`list_received_files`.
      operationId: list_received_files/continue
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFilesContinueArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesContinueError'
      description: Get more results with a cursor from :route:`list_received_files`.
  /sharing/remove_file_member_2:
    post:
      summary: Removes a specified member from the file.
      operationId: remove_file_member_2
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveFileMemberArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMemberRemoveActionResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveFileMemberError'
      description: Removes a specified member from the file.
      x-stone-select-admin-mode: team_admin
  /sharing/relinquish_file_membership:
    post:
      summary: |-
        The current user relinquishes their membership in the designated file.
            Note that the current user may still have inherited access to this file
            through the parent folder.
      operationId: relinquish_file_membership
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelinquishFileMembershipArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelinquishFileMembershipError'
      description: |-
        The current user relinquishes their membership in the designated file.
            Note that the current user may still have inherited access to this file
            through the parent folder.
      x-stone-select-admin-mode: team_admin
  /sharing/unshare_file:
    post:
      summary: Remove all members from this file. Does not remove inherited members.
      operationId: unshare_file
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnshareFileArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnshareFileError'
      description: Remove all members from this file. Does not remove inherited members.
      x-stone-select-admin-mode: team_admin
  /sharing/list_folders:
    post:
      summary: Return the list of all shared folders the current user has access to.
      operationId: list_folders
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFoldersArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFoldersResult'
      description: Return the list of all shared folders the current user has access to.
  /sharing/list_folders/continue:
    post:
      summary: |-
        Once a cursor has been retrieved from :route:`list_folders`, use this to paginate through all
            shared folders. The cursor must come from a previous call to :route:`list_folders` or
            :route:`list_folders/continue`.
      operationId: list_folders/continue
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFoldersContinueArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFoldersResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFoldersContinueError'
      description: |-
        Once a cursor has been retrieved from :route:`list_folders`, use this to paginate through all
            shared folders. The cursor must come from a previous call to :route:`list_folders` or
            :route:`list_folders/continue`.
  /sharing/list_mountable_folders:
    post:
      summary: Return the list of all shared folders the current user can mount or unmount.
      operationId: list_mountable_folders
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFoldersArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFoldersResult'
      description: Return the list of all shared folders the current user can mount or unmount.
  /sharing/list_mountable_folders/continue:
    post:
      summary: |-
        Once a cursor has been retrieved from :route:`list_mountable_folders`, use this to paginate through all
            mountable shared folders. The cursor must come from a previous call to :route:`list_mountable_folders` or
            :route:`list_mountable_folders/continue`.
      operationId: list_mountable_folders/continue
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFoldersContinueArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFoldersResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFoldersContinueError'
      description: |-
        Once a cursor has been retrieved from :route:`list_mountable_folders`, use this to paginate through all
            mountable shared folders. The cursor must come from a previous call to :route:`list_mountable_folders` or
            :route:`list_mountable_folders/continue`.
  /sharing/get_folder_metadata:
    post:
      summary: Returns shared folder metadata by its folder ID.
      operationId: get_folder_metadata
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMetadataArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedFolderMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedFolderAccessError'
      description: Returns shared folder metadata by its folder ID.
      x-stone-select-admin-mode: whole_team
  /sharing/list_folder_members:
    post:
      summary: Returns shared folder membership by its folder ID.
      operationId: list_folder_members
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFolderMembersArgs'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedFolderMembers'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedFolderAccessError'
      description: Returns shared folder membership by its folder ID.
      x-stone-select-admin-mode: whole_team
  /sharing/list_folder_members/continue:
    post:
      summary: |-
        Once a cursor has been retrieved from :route:`list_folder_members`, use this to paginate
            through all shared folder members.
      operationId: list_folder_members/continue
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFolderMembersContinueArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedFolderMembers'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFolderMembersContinueError'
      description: |-
        Once a cursor has been retrieved from :route:`list_folder_members`, use this to paginate
            through all shared folder members.
      x-stone-select-admin-mode: whole_team
  /sharing/share_folder:
    post:
      summary: |-
        Share a folder with collaborators.

            Most sharing will be completed synchronously. Large folders will be
            completed asynchronously. To make testing the async case repeatable, set
            `ShareFolderArg.force_async`.

            If a :field:`ShareFolderLaunch.async_job_id` is returned, you'll need to
            call :route:`check_share_job_status` until the action completes to get the
            metadata for the folder.
      operationId: share_folder
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareFolderArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareFolderLaunch'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareFolderError'
      description: |-
        Share a folder with collaborators.

            Most sharing will be completed synchronously. Large folders will be
            completed asynchronously. To make testing the async case repeatable, set
            `ShareFolderArg.force_async`.

            If a :field:`ShareFolderLaunch.async_job_id` is returned, you'll need to
            call :route:`check_share_job_status` until the action completes to get the
            metadata for the folder.
      x-stone-select-admin-mode: team_admin
  /sharing/check_share_job_status:
    post:
      summary: Returns the status of an asynchronous job for sharing a folder.
      operationId: check_share_job_status
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asyncPollArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareFolderJobStatus'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncPollError'
      description: Returns the status of an asynchronous job for sharing a folder.
      x-stone-select-admin-mode: team_admin
  /sharing/check_job_status:
    post:
      summary: Returns the status of an asynchronous job.
      operationId: check_job_status
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asyncPollArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncPollError'
      description: Returns the status of an asynchronous job.
      x-stone-select-admin-mode: team_admin
  /sharing/unshare_folder:
    post:
      summary: |-
        Allows a shared folder owner to unshare the folder.

            You'll need to call :route:`check_job_status` to determine if the action has
            completed successfully.
      operationId: unshare_folder
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnshareFolderArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncLaunchEmptyResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnshareFolderError'
      description: |-
        Allows a shared folder owner to unshare the folder.

            You'll need to call :route:`check_job_status` to determine if the action has
            completed successfully.
      x-stone-select-admin-mode: team_admin
  /sharing/transfer_folder:
    post:
      summary: |-
        Transfer ownership of a shared folder to a member of the shared folder.

            User must have :field:`AccessLevel.owner` access to the shared folder to perform a transfer.
      operationId: transfer_folder
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferFolderArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferFolderError'
      description: |-
        Transfer ownership of a shared folder to a member of the shared folder.

            User must have :field:`AccessLevel.owner` access to the shared folder to perform a transfer.
      x-stone-select-admin-mode: team_admin
  /sharing/update_folder_policy:
    post:
      summary: |-
        Update the sharing policies for a shared folder.

            User must have :field:`AccessLevel.owner` access to the shared folder to update its policies.
      operationId: update_folder_policy
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolderPolicyArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedFolderMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFolderPolicyError'
      description: |-
        Update the sharing policies for a shared folder.

            User must have :field:`AccessLevel.owner` access to the shared folder to update its policies.
      x-stone-select-admin-mode: team_admin
  /sharing/add_folder_member:
    post:
      summary: |-
        Allows an owner or editor (if the ACL update policy allows) of a shared
            folder to add another member.

            For the new member to get access to all the functionality for this folder,
            you will need to call :route:`mount_folder` on their behalf.
      operationId: add_folder_member
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFolderMemberArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddFolderMemberError'
      description: |-
        Allows an owner or editor (if the ACL update policy allows) of a shared
            folder to add another member.

            For the new member to get access to all the functionality for this folder,
            you will need to call :route:`mount_folder` on their behalf.
      x-stone-select-admin-mode: team_admin
  /sharing/remove_folder_member:
    post:
      summary: |-
        Allows an owner or editor (if the ACL update policy allows) of a shared
            folder to remove another member.
      operationId: remove_folder_member
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveFolderMemberArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncLaunchResultBase'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveFolderMemberError'
      description: |-
        Allows an owner or editor (if the ACL update policy allows) of a shared
            folder to remove another member.
      x-stone-select-admin-mode: team_admin
  /sharing/check_remove_member_job_status:
    post:
      summary: Returns the status of an asynchronous job for sharing a folder.
      operationId: check_remove_member_job_status
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asyncPollArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveMemberJobStatus'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncPollError'
      description: Returns the status of an asynchronous job for sharing a folder.
      x-stone-select-admin-mode: team_admin
  /sharing/update_folder_member:
    post:
      summary: |-
        Allows an owner or editor of a shared folder to update another member's
            permissions.
      operationId: update_folder_member
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolderMemberArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberAccessLevelResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFolderMemberError'
      description: |-
        Allows an owner or editor of a shared folder to update another member's
            permissions.
      x-stone-select-admin-mode: team_admin
  /sharing/mount_folder:
    post:
      summary: |-
        The current user mounts the designated folder.

            Mount a shared folder for a user after they have been added as a member.
            Once mounted, the shared folder will appear in their Dropbox.
      operationId: mount_folder
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MountFolderArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedFolderMetadata'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MountFolderError'
      description: |-
        The current user mounts the designated folder.

            Mount a shared folder for a user after they have been added as a member.
            Once mounted, the shared folder will appear in their Dropbox.
  /sharing/unmount_folder:
    post:
      summary: |-
        The current user unmounts the designated folder. They can re-mount the
            folder at a later time using :route:`mount_folder`.
      operationId: unmount_folder
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnmountFolderArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnmountFolderError'
      description: |-
        The current user unmounts the designated folder. They can re-mount the
            folder at a later time using :route:`mount_folder`.
      x-stone-select-admin-mode: team_admin
  /sharing/relinquish_folder_membership:
    post:
      summary: |-
        The current user relinquishes their membership in the designated shared
            folder and will no longer have access to the folder.  A folder owner cannot
            relinquish membership in their own folder.

            This will run synchronously if leave_a_copy is false, and asynchronously
            if leave_a_copy is true.
      operationId: relinquish_folder_membership
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelinquishFolderMembershipArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asyncLaunchEmptyResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelinquishFolderMembershipError'
      description: |-
        The current user relinquishes their membership in the designated shared
            folder and will no longer have access to the folder.  A folder owner cannot
            relinquish membership in their own folder.

            This will run synchronously if leave_a_copy is false, and asynchronously
            if leave_a_copy is true.
  /sharing/set_access_inheritance:
    post:
      summary: |-
        Change the inheritance policy of an existing Shared Folder. Only permitted for shared folders in a shared team root.

            If a :field:`ShareFolderLaunch.async_job_id` is returned, you'll need to
            call :route:`check_share_job_status` until the action completes to get the
            metadata for the folder.
      operationId: set_access_inheritance
      security:
      - oauth2:
        - sharing.write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetAccessInheritanceArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareFolderLaunch'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetAccessInheritanceError'
      description: |-
        Change the inheritance policy of an existing Shared Folder. Only permitted for shared folders in a shared team root.

            If a :field:`ShareFolderLaunch.async_job_id` is returned, you'll need to
            call :route:`check_share_job_status` until the action completes to get the
            metadata for the folder.
  /users/get_account:
    post:
      summary: Get information about a user's account.
      operationId: get_account
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccountArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAccount'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountError'
      description: Get information about a user's account.
      x-stone-allow-app-folder: true
  /users/get_current_account:
    post:
      summary: Get information about the current user's account.
      operationId: get_current_account
      security:
      - oauth2:
        - account_info.read
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullAccount'
      description: Get information about the current user's account.
      x-stone-allow-app-folder: true
      x-stone-select-admin-mode: whole_team
  /users/get_space_usage:
    post:
      summary: Get the space usage information for the current user's account.
      operationId: get_space_usage
      security:
      - oauth2:
        - account_info.read
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceUsage'
      description: Get the space usage information for the current user's account.
      x-stone-allow-app-folder: true
  /users/get_account_batch:
    post:
      summary: |-
        Get information about multiple user accounts.  At most 300 accounts may be queried
            per request.
      operationId: get_account_batch
      security:
      - oauth2:
        - sharing.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccountBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountBatchResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountBatchError'
      description: |-
        Get information about multiple user accounts.  At most 300 accounts may be queried
            per request.
      x-stone-allow-app-folder: true
  /users/features/get_values:
    post:
      summary: Get a list of feature values that may be configured for the current account.
      operationId: features/get_values
      security:
      - oauth2:
        - account_info.read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFeaturesGetValuesBatchArg'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFeaturesGetValuesBatchResult'
        '400':
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFeaturesGetValuesBatchError'
      description: Get a list of feature values that may be configured for the current account.
      x-stone-allow-app-folder: true
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://www.dropbox.com/oauth2/authorize
          tokenUrl: https://api.dropboxapi.com/oauth2/token
          scopes:
            account_info.write: Access to account info.write operations
            account_info.read: Access to account info.read operations
            contacts.write: Access to contacts.write operations
            files.metadata.write: Access to files.metadata.write operations
            files.metadata.read: Access to files.metadata.read operations
            file_requests.read: Access to file requests.read operations
            file_requests.write: Access to file requests.write operations
            files.content.read: Access to files.content.read operations
            files.content.write: Access to files.content.write operations
            files.permanent_delete: Access to files.permanent delete operations
            openid: Access to openid operations
            sharing.read: Access to sharing.read operations
            sharing.write: Access to sharing.write operations
  schemas:
    SetProfilePhotoArg:
      type: object
      properties:
        photo:
          $ref: '#/components/schemas/PhotoSourceArg'
      required:
      - photo
    SetProfilePhotoResult:
      type: object
      properties:
        profile_photo_url:
          type: string
      required:
      - profile_photo_url
    PhotoSourceArg:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - base64_data
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          base64_data: '#/components/schemas/String'
    SetProfilePhotoError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - file_type_error
          - file_size_error
          - dimension_error
          - thumbnail_error
          - transient_error
      required:
      - .tag
    PollArg:
      type: object
      properties:
        async_job_id:
          $ref: '#/components/schemas/AsyncJobId'
      required:
      - async_job_id
      description: Arguments for methods that poll the status of an asynchronous job.
    LaunchResultBase:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - async_job_id
      required:
      - .tag
      description: |-
        Result returned by methods that launch an asynchronous job.

            A method who may either launch an asynchronous job, or complete the request
            synchronously, can use this union by extending it, and adding a 'complete' field
            with the type of the synchronous response.

            See :type:`LaunchEmptyResult` for an example.
      discriminator:
        propertyName: .tag
        mapping:
          async_job_id: '#/components/schemas/AsyncJobId'
    LaunchEmptyResult:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
      required:
      - .tag
      description: |-
        Result returned by methods that may either launch an asynchronous job or complete synchronously.
            Upon synchronous completion of the job, no additional information is returned.
    PollResultBase:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - in_progress
      required:
      - .tag
      description: |-
        Result returned by methods that poll for the status of an asynchronous job.
            Unions that extend this union should add a 'complete' field with a type of
            the information returned upon job completion.

            See :type:`PollEmptyResult` for an example.
    PollEmptyResult:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
      required:
      - .tag
      description: |-
        Result returned by methods that poll for the status of an asynchronous job.
            Upon completion of the job, no additional information is returned.
    PollError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_async_job_id
          - internal_error
      required:
      - .tag
      description: Error returned by methods for polling the status of asynchronous job.
    AsyncJobId:
      type: string
      minLength: 1
    TokenScopeError:
      type: object
      properties:
        required_scope:
          type: string
      required:
      - required_scope
    RateLimitError:
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/RateLimitReason'
        retry_after:
          type: integer
          format: int64
      required:
      - reason
      - retry_after
      description: Error occurred because the app is being rate limited.
    TokenFromOAuth1Arg:
      type: object
      properties:
        oauth1_token:
          type: string
          minLength: 1
        oauth1_token_secret:
          type: string
          minLength: 1
      required:
      - oauth1_token
      - oauth1_token_secret
    TokenFromOAuth1Result:
      type: object
      properties:
        oauth2_token:
          type: string
          minLength: 1
      required:
      - oauth2_token
    AuthError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_access_token
          - invalid_select_user
          - invalid_select_admin
          - user_suspended
          - expired_access_token
          - missing_scope
          - route_access_denied
      required:
      - .tag
      description: Errors occurred during authentication.
      discriminator:
        propertyName: .tag
        mapping:
          missing_scope: '#/components/schemas/TokenScopeError'
    RateLimitReason:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - too_many_requests
          - too_many_write_operations
      required:
      - .tag
    TokenFromOAuth1Error:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_oauth1_token_info
          - app_id_mismatch
      required:
      - .tag
    AccessError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_account_type
          - paper_access_denied
      required:
      - .tag
      description: Error occurred because the account doesn't have permission to access the resource.
      discriminator:
        propertyName: .tag
        mapping:
          invalid_account_type: '#/components/schemas/InvalidAccountTypeError'
          paper_access_denied: '#/components/schemas/PaperAccessError'
    PaperAccessError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - paper_disabled
          - not_paper_user
      required:
      - .tag
    InvalidAccountTypeError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - endpoint
          - feature
      required:
      - .tag
    EchoArg:
      type: object
      properties:
        query:
          type: string
          maxLength: 500
      required:
      - query
      description: Contains the arguments to be sent to the Dropbox servers.
    EchoResult:
      type: object
      properties:
        result:
          type: string
      required:
      - result
      description: EchoResult contains the result returned from the Dropbox servers.
    RootInfo:
      type: object
      properties:
        root_namespace_id:
          $ref: '#/components/schemas/NamespaceId'
        home_namespace_id:
          $ref: '#/components/schemas/NamespaceId'
      required:
      - root_namespace_id
      - home_namespace_id
      description: Information about current user's root.
    TeamRootInfo:
      allOf:
      - $ref: '#/components/schemas/RootInfo'
      - type: object
        properties:
          home_path:
            type: string
        required:
        - home_path
        description: Root info when user is member of a team with a separate root namespace ID.
      description: Root info when user is member of a team with a separate root namespace ID.
    UserRootInfo:
      allOf:
      - $ref: '#/components/schemas/RootInfo'
      - type: object
        properties: {}
        description: |-
          Root info when user is not member of a team or
              the user is a member of a team and the team does not have a separate root namespace.
      description: |-
        Root info when user is not member of a team or
            the user is a member of a team and the team does not have a separate root namespace.
    PathRoot:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - home
          - root
          - namespace_id
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          root: '#/components/schemas/NamespaceId'
          namespace_id: '#/components/schemas/NamespaceId'
    PathRootError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_root
          - no_permission
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          invalid_root: '#/components/schemas/RootInfo'
    Date:
      type: string
      format: date-time
    DisplayName:
      type: string
    DisplayNameLegacy:
      type: string
    DropboxTimestamp:
      type: string
      format: date-time
    OptionalNamePart:
      type: string
      maxLength: 100
    NamespaceId:
      type: string
    NamePart:
      type: string
      minLength: 1
      maxLength: 100
    EmailAddress:
      type: string
      maxLength: 255
    SharedFolderId:
      allOf:
      - $ref: '#/components/schemas/NamespaceId'
    LanguageCode:
      type: string
      minLength: 2
    SessionId:
      type: string
    DeleteManualContactsArg:
      type: object
      properties:
        email_addresses:
          type: array
          items:
            $ref: '#/components/schemas/EmailAddress'
      required:
      - email_addresses
    DeleteManualContactsError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - contacts_not_found
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          contacts_not_found: '#/components/schemas/List(commonEmailAddress)'
    PropertyField:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      required:
      - name
      - value
      description: |-
        Raw key/value data to be associated with a Dropbox file. Property fields are added to Dropbox
            files as a :type:`PropertyGroup`.
    PropertyGroup:
      type: object
      properties:
        template_id:
          $ref: '#/components/schemas/TemplateId'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/PropertyField'
      required:
      - template_id
      - fields
      description: |-
        A subset of the property fields described by the corresponding :type:`PropertyGroupTemplate`.
            Properties are always added to a Dropbox file as a :type:`PropertyGroup`.
            The possible key names and value types in this group are defined by the
            corresponding :type:`PropertyGroupTemplate`.
    PropertyFieldTemplate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/PropertyType'
      required:
      - name
      - description
      - type
      description: Defines how a single property field may be structured. Used exclusively by :type:`PropertyGroupTemplate`.
    PropertyGroupTemplate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/PropertyFieldTemplate'
      required:
      - name
      - description
      - fields
      description: Defines how a property group may be structured.
    AddPropertiesArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/PathOrId'
        property_groups:
          type: array
          items:
            $ref: '#/components/schemas/PropertyGroup'
      required:
      - path
      - property_groups
    OverwritePropertyGroupArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/PathOrId'
        property_groups:
          type: array
          items:
            $ref: '#/components/schemas/PropertyGroup'
      required:
      - path
      - property_groups
    PropertyGroupUpdate:
      type: object
      properties:
        template_id:
          $ref: '#/components/schemas/TemplateId'
        add_or_update_fields:
          type: array
          items:
            $ref: '#/components/schemas/PropertyField'
          nullable: true
        remove_fields:
          type: array
          items:
            type: string
          nullable: true
      required:
      - template_id
    UpdatePropertiesArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/PathOrId'
        update_property_groups:
          type: array
          items:
            $ref: '#/components/schemas/PropertyGroupUpdate'
      required:
      - path
      - update_property_groups
    RemovePropertiesArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/PathOrId'
        property_template_ids:
          type: array
          items:
            $ref: '#/components/schemas/TemplateId'
      required:
      - path
      - property_template_ids
    AddTemplateArg:
      allOf:
      - $ref: '#/components/schemas/PropertyGroupTemplate'
      - type: object
        properties: {}
    AddTemplateResult:
      type: object
      properties:
        template_id:
          $ref: '#/components/schemas/TemplateId'
      required:
      - template_id
    GetTemplateArg:
      type: object
      properties:
        template_id:
          $ref: '#/components/schemas/TemplateId'
      required:
      - template_id
    GetTemplateResult:
      allOf:
      - $ref: '#/components/schemas/PropertyGroupTemplate'
      - type: object
        properties: {}
    UpdateTemplateArg:
      type: object
      properties:
        template_id:
          $ref: '#/components/schemas/TemplateId'
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        add_fields:
          type: array
          items:
            $ref: '#/components/schemas/PropertyFieldTemplate'
          nullable: true
      required:
      - template_id
    UpdateTemplateResult:
      type: object
      properties:
        template_id:
          $ref: '#/components/schemas/TemplateId'
      required:
      - template_id
    ListTemplateResult:
      type: object
      properties:
        template_ids:
          type: array
          items:
            $ref: '#/components/schemas/TemplateId'
      required:
      - template_ids
    RemoveTemplateArg:
      type: object
      properties:
        template_id:
          $ref: '#/components/schemas/TemplateId'
      required:
      - template_id
    PropertiesSearchQuery:
      type: object
      properties:
        query:
          type: string
        mode:
          $ref: '#/components/schemas/PropertiesSearchMode'
        logical_operator:
          $ref: '#/components/schemas/LogicalOperator'
      required:
      - query
      - mode
      - logical_operator
    PropertiesSearchArg:
      type: object
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/PropertiesSearchQuery'
        template_filter:
          $ref: '#/components/schemas/TemplateFilter'
      required:
      - queries
      - template_filter
    PropertiesSearchMatch:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        path:
          type: string
        is_deleted:
          type: boolean
        property_groups:
          type: array
          items:
            $ref: '#/components/schemas/PropertyGroup'
      required:
      - id
      - path
      - is_deleted
      - property_groups
    PropertiesSearchResult:
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/PropertiesSearchMatch'
        cursor:
          $ref: '#/components/schemas/PropertiesSearchCursor'
      required:
      - matches
    PropertiesSearchContinueArg:
      type: object
      properties:
        cursor:
          $ref: '#/components/schemas/PropertiesSearchCursor'
      required:
      - cursor
    LookupError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - malformed_path
          - not_found
          - not_file
          - not_folder
          - restricted_content
          - unsupported_content_type
          - locked
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          malformed_path: '#/components/schemas/MalformedPathError'
    LookUpPropertiesError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - property_group_not_found
      required:
      - .tag
    TemplateError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - template_not_found
          - restricted_content
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          template_not_found: '#/components/schemas/TemplateId'
    PropertiesError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - unsupported_folder
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    InvalidPropertyGroupError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - property_field_too_large
          - does_not_fit_template
          - duplicate_property_groups
      required:
      - .tag
    AddPropertiesError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - property_group_already_exists
      required:
      - .tag
    UpdatePropertiesError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - property_group_lookup
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          property_group_lookup: '#/components/schemas/LookUpPropertiesError'
    RemovePropertiesError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - property_group_lookup
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          property_group_lookup: '#/components/schemas/LookUpPropertiesError'
    ModifyTemplateError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - conflicting_property_names
          - too_many_properties
          - too_many_templates
          - template_attribute_too_large
      required:
      - .tag
    TemplateOwnerType:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - user
          - team
      required:
      - .tag
    LogicalOperator:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - or_operator
      required:
      - .tag
      description: Logical operator to join search queries together.
    PropertiesSearchMode:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - field_name
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          field_name: '#/components/schemas/String'
    TemplateFilterBase:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - filter_some
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          filter_some: '#/components/schemas/List(TemplateId, minitems=1)'
    TemplateFilter:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - filter_none
      required:
      - .tag
    PropertiesSearchError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - property_group_lookup
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          property_group_lookup: '#/components/schemas/LookUpPropertiesError'
    PropertiesSearchContinueError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - reset
      required:
      - .tag
    PropertiesSearchCursor:
      type: string
      minLength: 1
    TemplateId:
      type: string
      minLength: 1
    PathOrId:
      type: string
      minLength: 1
    Id:
      allOf:
      - $ref: '#/components/schemas/Id'
    FileRequestDeadline:
      type: object
      properties:
        deadline:
          $ref: '#/components/schemas/DropboxTimestamp'
        allow_late_uploads:
          $ref: '#/components/schemas/GracePeriod'
      required:
      - deadline
    FileRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/FileRequestId'
        url:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        destination:
          $ref: '#/components/schemas/Path'
        created:
          $ref: '#/components/schemas/DropboxTimestamp'
        deadline:
          $ref: '#/components/schemas/FileRequestDeadline'
        is_open:
          type: boolean
        file_count:
          type: integer
          format: int64
        description:
          type: string
          nullable: true
      required:
      - id
      - url
      - title
      - created
      - is_open
      - file_count
      description: |-
        A :link:`file request https://www.dropbox.com/help/9090` for receiving
            files into the user's Dropbox account.
    ListFileRequestsArg:
      type: object
      properties:
        limit:
          type: integer
          format: int64
      required:
      - limit
      description: Arguments for :route:`list:2`.
    ListFileRequestsV2Result:
      type: object
      properties:
        file_requests:
          type: array
          items:
            $ref: '#/components/schemas/FileRequest'
        cursor:
          type: string
        has_more:
          type: boolean
      required:
      - file_requests
      - cursor
      - has_more
      description: Result for :route:`list:2` and :route:`list/continue`.
    ListFileRequestsContinueArg:
      type: object
      properties:
        cursor:
          type: string
      required:
      - cursor
    ListFileRequestsResult:
      type: object
      properties:
        file_requests:
          type: array
          items:
            $ref: '#/components/schemas/FileRequest'
      required:
      - file_requests
      description: Result for :route:`list`.
    GetFileRequestArgs:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/FileRequestId'
      required:
      - id
      description: Arguments for :route:`get`.
    CreateFileRequestArgs:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        destination:
          $ref: '#/components/schemas/Path'
        deadline:
          $ref: '#/components/schemas/FileRequestDeadline'
        open:
          type: boolean
        description:
          type: string
          nullable: true
      required:
      - title
      - destination
      - open
      description: Arguments for :route:`create`.
    UpdateFileRequestArgs:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/FileRequestId'
        title:
          type: string
          minLength: 1
          nullable: true
        destination:
          $ref: '#/components/schemas/Path'
        deadline:
          $ref: '#/components/schemas/UpdateFileRequestDeadline'
        open:
          type: boolean
          nullable: true
        description:
          type: string
          nullable: true
      required:
      - id
      - deadline
      description: Arguments for :route:`update`.
    CountFileRequestsResult:
      type: object
      properties:
        file_request_count:
          type: integer
          format: int64
      required:
      - file_request_count
      description: Result for :route:`count`.
    DeleteFileRequestArgs:
      type: object
      properties:
        ids:
          type: array
          items:
            $ref: '#/components/schemas/FileRequestId'
      required:
      - ids
      description: Arguments for :route:`delete`.
    DeleteFileRequestsResult:
      type: object
      properties:
        file_requests:
          type: array
          items:
            $ref: '#/components/schemas/FileRequest'
      required:
      - file_requests
      description: Result for :route:`delete`.
    DeleteAllClosedFileRequestsResult:
      type: object
      properties:
        file_requests:
          type: array
          items:
            $ref: '#/components/schemas/FileRequest'
      required:
      - file_requests
      description: Result for :route:`delete_all_closed`.
    GracePeriod:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - one_day
          - two_days
          - seven_days
          - thirty_days
          - always
      required:
      - .tag
    GeneralFileRequestsError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - disabled_for_team
      required:
      - .tag
      description: There is an error accessing the file requests functionality.
    FileRequestError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - not_found
          - not_a_folder
          - app_lacks_access
          - no_permission
          - email_unverified
          - validation_error
      required:
      - .tag
      description: There is an error with the file request.
    ListFileRequestsContinueError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_cursor
      required:
      - .tag
      description: There was an error retrieving the file requests.
    ListFileRequestsError:
      type: object
      properties:
        .tag:
          type: string
          enum: []
      required:
      - .tag
      description: There was an error retrieving the file requests.
    GetFileRequestError:
      type: object
      properties:
        .tag:
          type: string
          enum: []
      required:
      - .tag
      description: There was an error retrieving the specified file request.
    CreateFileRequestError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_location
          - rate_limit
      required:
      - .tag
      description: There was an error creating the file request.
    UpdateFileRequestError:
      type: object
      properties:
        .tag:
          type: string
          enum: []
      required:
      - .tag
      description: There is an error updating the file request.
    CountFileRequestsError:
      type: object
      properties:
        .tag:
          type: string
          enum: []
      required:
      - .tag
      description: There was an error counting the file requests.
    DeleteFileRequestError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - file_request_open
      required:
      - .tag
      description: There was an error deleting these file requests.
    DeleteAllClosedFileRequestsError:
      type: object
      properties:
        .tag:
          type: string
          enum: []
      required:
      - .tag
      description: There was an error deleting all closed file requests.
    FileRequestValidationError:
      type: string
      nullable: true
    FileRequestId:
      type: string
      minLength: 1
    UserGeneratedTag:
      type: object
      properties:
        tag_text:
          $ref: '#/components/schemas/TagText'
      required:
      - tag_text
    AddTagArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/Path'
        tag_text:
          $ref: '#/components/schemas/TagText'
      required:
      - path
      - tag_text
    RemoveTagArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/Path'
        tag_text:
          $ref: '#/components/schemas/TagText'
      required:
      - path
      - tag_text
    GetTagsArg:
      type: object
      properties:
        paths:
          type: array
          items:
            $ref: '#/components/schemas/Path'
      required:
      - paths
    PathToTags:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/Path'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
      - path
      - tags
    GetTagsResult:
      type: object
      properties:
        paths_to_tags:
          type: array
          items:
            $ref: '#/components/schemas/PathToTags'
      required:
      - paths_to_tags
    Tag:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - user_generated_tag
      required:
      - .tag
      description: Tag that can be added in multiple ways.
      discriminator:
        propertyName: .tag
        mapping:
          user_generated_tag: '#/components/schemas/UserGeneratedTag'
    BaseTagError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    AddTagError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - too_many_tags
      required:
      - .tag
    RemoveTagError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - tag_not_present
      required:
      - .tag
    TagText:
      type: string
      minLength: 1
      maxLength: 32
    Metadata:
      type: object
      properties:
        name:
          type: string
        path_lower:
          type: string
          nullable: true
        path_display:
          type: string
          nullable: true
        parent_shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        preview_url:
          type: string
          nullable: true
      required:
      - name
      description: Metadata for a file or folder.
    HighlightSpan:
      type: object
      properties:
        highlight_str:
          type: string
        is_highlighted:
          type: boolean
      required:
      - highlight_str
      - is_highlighted
    SharingInfo:
      type: object
      properties:
        read_only:
          type: boolean
      required:
      - read_only
      description: Sharing info for a file or folder.
    FileSharingInfo:
      allOf:
      - $ref: '#/components/schemas/SharingInfo'
      - type: object
        properties:
          parent_shared_folder_id:
            $ref: '#/components/schemas/SharedFolderId'
          modified_by:
            $ref: '#/components/schemas/AccountId'
        required:
        - parent_shared_folder_id
        description: Sharing info for a file which is contained by a shared folder.
      description: Sharing info for a file which is contained by a shared folder.
    ExportInfo:
      type: object
      properties:
        export_as:
          type: string
          nullable: true
        export_options:
          type: array
          items:
            type: string
          nullable: true
      description: Export information for a file.
    FolderSharingInfo:
      allOf:
      - $ref: '#/components/schemas/SharingInfo'
      - type: object
        properties:
          parent_shared_folder_id:
            $ref: '#/components/schemas/SharedFolderId'
          shared_folder_id:
            $ref: '#/components/schemas/SharedFolderId'
          traverse_only:
            type: boolean
          no_access:
            type: boolean
        required:
        - traverse_only
        - no_access
        description: |-
          Sharing info for a folder which is contained in a shared folder or is a
              shared folder mount point.
      description: |-
        Sharing info for a folder which is contained in a shared folder or is a
            shared folder mount point.
    Dimensions:
      type: object
      properties:
        height:
          type: integer
          format: int64
        width:
          type: integer
          format: int64
      required:
      - height
      - width
      description: Dimensions for a photo or video.
    GpsCoordinates:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
      required:
      - latitude
      - longitude
      description: GPS coordinates for a photo or video.
    MediaMetadata:
      type: object
      properties:
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        location:
          $ref: '#/components/schemas/GpsCoordinates'
        time_taken:
          $ref: '#/components/schemas/DropboxTimestamp'
      description: Metadata for a photo or video.
    PhotoMetadata:
      allOf:
      - $ref: '#/components/schemas/MediaMetadata'
      - type: object
        properties: {}
        description: Metadata for a photo.
      description: Metadata for a photo.
    VideoMetadata:
      allOf:
      - $ref: '#/components/schemas/MediaMetadata'
      - type: object
        properties:
          duration:
            type: integer
            format: int64
            nullable: true
        description: Metadata for a video.
      description: Metadata for a video.
    SymlinkInfo:
      type: object
      properties:
        target:
          type: string
      required:
      - target
    FileLockMetadata:
      type: object
      properties:
        is_lockholder:
          type: boolean
          nullable: true
        lockholder_name:
          type: string
          nullable: true
        lockholder_account_id:
          $ref: '#/components/schemas/AccountId'
        created:
          $ref: '#/components/schemas/DropboxTimestamp'
    FileMetadata:
      allOf:
      - $ref: '#/components/schemas/Metadata'
      - type: object
        properties:
          id:
            $ref: '#/components/schemas/Id'
          client_modified:
            $ref: '#/components/schemas/DropboxTimestamp'
          server_modified:
            $ref: '#/components/schemas/DropboxTimestamp'
          rev:
            $ref: '#/components/schemas/Rev'
          size:
            type: integer
            format: int64
          media_info:
            $ref: '#/components/schemas/MediaInfo'
          symlink_info:
            $ref: '#/components/schemas/SymlinkInfo'
          sharing_info:
            $ref: '#/components/schemas/FileSharingInfo'
          is_downloadable:
            type: boolean
          export_info:
            $ref: '#/components/schemas/ExportInfo'
          property_groups:
            type: array
            items:
              $ref: '#/components/schemas/PropertyGroup'
            nullable: true
          has_explicit_shared_members:
            type: boolean
            nullable: true
          content_hash:
            $ref: '#/components/schemas/Sha256HexHash'
          file_lock_info:
            $ref: '#/components/schemas/FileLockMetadata'
        required:
        - id
        - client_modified
        - server_modified
        - rev
        - size
        - is_downloadable
    FolderMetadata:
      allOf:
      - $ref: '#/components/schemas/Metadata'
      - type: object
        properties:
          id:
            $ref: '#/components/schemas/Id'
          shared_folder_id:
            $ref: '#/components/schemas/SharedFolderId'
          sharing_info:
            $ref: '#/components/schemas/FolderSharingInfo'
          property_groups:
            type: array
            items:
              $ref: '#/components/schemas/PropertyGroup'
            nullable: true
        required:
        - id
    DeletedMetadata:
      allOf:
      - $ref: '#/components/schemas/Metadata'
      - type: object
        properties: {}
        description: Indicates that there used to be a file or folder at this path, but it no longer exists.
      description: Indicates that there used to be a file or folder at this path, but it no longer exists.
    GetMetadataArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/ReadPath'
        include_media_info:
          type: boolean
        include_deleted:
          type: boolean
        include_has_explicit_shared_members:
          type: boolean
        include_property_groups:
          $ref: '#/components/schemas/TemplateFilterBase'
      required:
      - path
      - include_media_info
      - include_deleted
      - include_has_explicit_shared_members
    FileOpsResult:
      type: object
      properties: {}
    ListFolderLongpollArg:
      type: object
      properties:
        cursor:
          $ref: '#/components/schemas/ListFolderCursor'
        timeout:
          type: integer
          format: int64
          minimum: 30
          maximum: 480
      required:
      - cursor
      - timeout
    ListFolderLongpollResult:
      type: object
      properties:
        changes:
          type: boolean
        backoff:
          type: integer
          format: int64
          nullable: true
      required:
      - changes
    SharedLink:
      type: object
      properties:
        url:
          $ref: '#/components/schemas/SharedLinkUrl'
        password:
          type: string
          nullable: true
      required:
      - url
    ListFolderArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/PathROrId'
        recursive:
          type: boolean
        include_media_info:
          type: boolean
        include_deleted:
          type: boolean
        include_has_explicit_shared_members:
          type: boolean
        include_mounted_folders:
          type: boolean
        limit:
          type: integer
          format: int32
          minimum: 1
          maximum: 2000
          nullable: true
        shared_link:
          $ref: '#/components/schemas/SharedLink'
        include_property_groups:
          $ref: '#/components/schemas/TemplateFilterBase'
        include_non_downloadable_files:
          type: boolean
      required:
      - path
      - recursive
      - include_media_info
      - include_deleted
      - include_has_explicit_shared_members
      - include_mounted_folders
      - include_non_downloadable_files
    ListFolderResult:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
        cursor:
          $ref: '#/components/schemas/ListFolderCursor'
        has_more:
          type: boolean
      required:
      - entries
      - cursor
      - has_more
    ListFolderContinueArg:
      type: object
      properties:
        cursor:
          $ref: '#/components/schemas/ListFolderCursor'
      required:
      - cursor
    ListFolderGetLatestCursorResult:
      type: object
      properties:
        cursor:
          $ref: '#/components/schemas/ListFolderCursor'
      required:
      - cursor
    DownloadArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/ReadPath'
        rev:
          $ref: '#/components/schemas/Rev'
      required:
      - path
    DownloadZipArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/ReadPath'
      required:
      - path
    DownloadZipResult:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/FolderMetadata'
      required:
      - metadata
    ExportArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/ReadPath'
        export_format:
          type: string
          nullable: true
      required:
      - path
    ExportMetadata:
      type: object
      properties:
        name:
          type: string
        size:
          type: integer
          format: int64
        export_hash:
          $ref: '#/components/schemas/Sha256HexHash'
        paper_revision:
          type: integer
          format: int64
          nullable: true
      required:
      - name
      - size
    ExportResult:
      type: object
      properties:
        export_metadata:
          $ref: '#/components/schemas/ExportMetadata'
        file_metadata:
          $ref: '#/components/schemas/FileMetadata'
      required:
      - export_metadata
      - file_metadata
    UploadWriteFailed:
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/WriteError'
        upload_session_id:
          type: string
      required:
      - reason
      - upload_session_id
    UploadSessionOffsetError:
      type: object
      properties:
        correct_offset:
          type: integer
          format: int64
      required:
      - correct_offset
    UploadSessionStartArg:
      type: object
      properties:
        close:
          type: boolean
        session_type:
          $ref: '#/components/schemas/UploadSessionType'
        content_hash:
          $ref: '#/components/schemas/Sha256HexHash'
      required:
      - close
    UploadSessionStartResult:
      type: object
      properties:
        session_id:
          type: string
      required:
      - session_id
    UploadSessionStartBatchArg:
      type: object
      properties:
        session_type:
          $ref: '#/components/schemas/UploadSessionType'
        num_sessions:
          type: integer
          format: int64
          minimum: 1
          maximum: 1000
      required:
      - num_sessions
    UploadSessionStartBatchResult:
      type: object
      properties:
        session_ids:
          type: array
          items:
            type: string
      required:
      - session_ids
    UploadSessionAppendArg:
      type: object
      properties:
        cursor:
          $ref: '#/components/schemas/UploadSessionCursor'
        close:
          type: boolean
        content_hash:
          $ref: '#/components/schemas/Sha256HexHash'
      required:
      - cursor
      - close
    UploadSessionCursor:
      type: object
      properties:
        session_id:
          type: string
        offset:
          type: integer
          format: int64
      required:
      - session_id
      - offset
    CommitInfo:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/WritePathOrId'
        mode:
          $ref: '#/components/schemas/WriteMode'
        autorename:
          type: boolean
        client_modified:
          $ref: '#/components/schemas/DropboxTimestamp'
        mute:
          type: boolean
        property_groups:
          type: array
          items:
            $ref: '#/components/schemas/PropertyGroup'
          nullable: true
        strict_conflict:
          type: boolean
      required:
      - path
      - mode
      - autorename
      - mute
      - strict_conflict
    UploadSessionFinishArg:
      type: object
      properties:
        cursor:
          $ref: '#/components/schemas/UploadSessionCursor'
        commit:
          $ref: '#/components/schemas/CommitInfo'
        content_hash:
          $ref: '#/components/schemas/Sha256HexHash'
      required:
      - cursor
      - commit
    UploadArg:
      allOf:
      - $ref: '#/components/schemas/CommitInfo'
      - type: object
        properties:
          content_hash:
            $ref: '#/components/schemas/Sha256HexHash'
    UploadSessionFinishBatchArg:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/UploadSessionFinishArg'
      required:
      - entries
    UploadSessionFinishBatchResult:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/UploadSessionFinishBatchResultEntry'
      required:
      - entries
    SearchArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/PathROrId'
        query:
          type: string
          maxLength: 1000
        start:
          type: integer
          format: int64
          maximum: 9999
        max_results:
          type: integer
          format: int64
          minimum: 1
          maximum: 1000
        mode:
          $ref: '#/components/schemas/SearchMode'
      required:
      - path
      - query
      - start
      - max_results
      - mode
    SearchMatch:
      type: object
      properties:
        match_type:
          $ref: '#/components/schemas/SearchMatchType'
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - match_type
      - metadata
    SearchResult:
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/SearchMatch'
        more:
          type: boolean
        start:
          type: integer
          format: int64
      required:
      - matches
      - more
      - start
    SearchV2Arg:
      type: object
      properties:
        query:
          type: string
          maxLength: 1000
        options:
          $ref: '#/components/schemas/SearchOptions'
        match_field_options:
          $ref: '#/components/schemas/SearchMatchFieldOptions'
        include_highlights:
          type: boolean
          nullable: true
      required:
      - query
    SearchOptions:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/PathROrId'
        max_results:
          type: integer
          format: int64
          minimum: 1
          maximum: 1000
        order_by:
          $ref: '#/components/schemas/SearchOrderBy'
        file_status:
          $ref: '#/components/schemas/FileStatus'
        filename_only:
          type: boolean
        file_extensions:
          type: array
          items:
            type: string
          nullable: true
        file_categories:
          type: array
          items:
            $ref: '#/components/schemas/FileCategory'
          nullable: true
        account_id:
          $ref: '#/components/schemas/AccountId'
      required:
      - max_results
      - file_status
      - filename_only
    SearchMatchFieldOptions:
      type: object
      properties:
        include_highlights:
          type: boolean
      required:
      - include_highlights
    SearchV2ContinueArg:
      type: object
      properties:
        cursor:
          $ref: '#/components/schemas/SearchV2Cursor'
      required:
      - cursor
    SearchV2Result:
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/SearchMatchV2'
        has_more:
          type: boolean
        cursor:
          $ref: '#/components/schemas/SearchV2Cursor'
      required:
      - matches
      - has_more
    SearchMatchV2:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/MetadataV2'
        match_type:
          $ref: '#/components/schemas/SearchMatchTypeV2'
        highlight_spans:
          type: array
          items:
            $ref: '#/components/schemas/HighlightSpan'
          nullable: true
      required:
      - metadata
    CreateFolderArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/WritePath'
        autorename:
          type: boolean
      required:
      - path
      - autorename
    CreateFolderResult:
      allOf:
      - $ref: '#/components/schemas/FileOpsResult'
      - type: object
        properties:
          metadata:
            $ref: '#/components/schemas/FolderMetadata'
        required:
        - metadata
    CreateFolderBatchArg:
      type: object
      properties:
        paths:
          type: array
          items:
            $ref: '#/components/schemas/WritePath'
        autorename:
          type: boolean
        force_async:
          type: boolean
      required:
      - paths
      - autorename
      - force_async
    CreateFolderEntryResult:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/FolderMetadata'
      required:
      - metadata
    CreateFolderBatchResult:
      allOf:
      - $ref: '#/components/schemas/FileOpsResult'
      - type: object
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/CreateFolderBatchResultEntry'
        required:
        - entries
    DeleteArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/WritePathOrId'
        parent_rev:
          $ref: '#/components/schemas/Rev'
      required:
      - path
    DeleteBatchArg:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/DeleteArg'
      required:
      - entries
    DeleteBatchResultData:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - metadata
    DeleteResult:
      allOf:
      - $ref: '#/components/schemas/FileOpsResult'
      - type: object
        properties:
          metadata:
            $ref: '#/components/schemas/Metadata'
        required:
        - metadata
    DeleteBatchResult:
      allOf:
      - $ref: '#/components/schemas/FileOpsResult'
      - type: object
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/DeleteBatchResultEntry'
        required:
        - entries
    RelocationPath:
      type: object
      properties:
        from_path:
          $ref: '#/components/schemas/WritePathOrId'
        to_path:
          $ref: '#/components/schemas/WritePathOrId'
      required:
      - from_path
      - to_path
    RelocationArg:
      allOf:
      - $ref: '#/components/schemas/RelocationPath'
      - type: object
        properties:
          allow_shared_folder:
            type: boolean
          autorename:
            type: boolean
          allow_ownership_transfer:
            type: boolean
        required:
        - allow_shared_folder
        - autorename
        - allow_ownership_transfer
    RelocationResult:
      allOf:
      - $ref: '#/components/schemas/FileOpsResult'
      - type: object
        properties:
          metadata:
            $ref: '#/components/schemas/Metadata'
        required:
        - metadata
    RelocationBatchArgBase:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/RelocationPath'
        autorename:
          type: boolean
      required:
      - entries
      - autorename
    RelocationBatchV2Result:
      allOf:
      - $ref: '#/components/schemas/FileOpsResult'
      - type: object
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/RelocationBatchResultEntry'
        required:
        - entries
    RelocationBatchArg:
      allOf:
      - $ref: '#/components/schemas/RelocationBatchArgBase'
      - type: object
        properties:
          allow_shared_folder:
            type: boolean
          allow_ownership_transfer:
            type: boolean
        required:
        - allow_shared_folder
        - allow_ownership_transfer
    RelocationBatchResultData:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - metadata
    RelocationBatchResult:
      allOf:
      - $ref: '#/components/schemas/FileOpsResult'
      - type: object
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/RelocationBatchResultData'
        required:
        - entries
    MoveBatchArg:
      allOf:
      - $ref: '#/components/schemas/RelocationBatchArgBase'
      - type: object
        properties:
          allow_ownership_transfer:
            type: boolean
        required:
        - allow_ownership_transfer
    ThumbnailArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/ReadPath'
        format:
          $ref: '#/components/schemas/ThumbnailFormat'
        size:
          $ref: '#/components/schemas/ThumbnailSize'
        mode:
          $ref: '#/components/schemas/ThumbnailMode'
      required:
      - path
      - format
      - size
      - mode
    GetThumbnailBatchArg:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ThumbnailArg'
      required:
      - entries
      description: Arguments for :route:`get_thumbnail_batch`.
    GetThumbnailBatchResult:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/GetThumbnailBatchResultEntry'
      required:
      - entries
    GetThumbnailBatchResultData:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/FileMetadata'
        thumbnail:
          type: string
      required:
      - metadata
      - thumbnail
    MinimalFileLinkMetadata:
      type: object
      properties:
        url:
          type: string
        id:
          $ref: '#/components/schemas/Id'
        path:
          type: string
          nullable: true
        rev:
          $ref: '#/components/schemas/Rev'
      required:
      - url
      - rev
    PreviewResult:
      type: object
      properties:
        file_metadata:
          $ref: '#/components/schemas/FileMetadata'
        link_metadata:
          $ref: '#/components/schemas/MinimalFileLinkMetadata'
    SharedLinkFileInfo:
      type: object
      properties:
        url:
          type: string
        path:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      required:
      - url
    ThumbnailV2Arg:
      type: object
      properties:
        resource:
          $ref: '#/components/schemas/PathOrLink'
        format:
          $ref: '#/components/schemas/ThumbnailFormat'
        size:
          $ref: '#/components/schemas/ThumbnailSize'
        mode:
          $ref: '#/components/schemas/ThumbnailMode'
      required:
      - resource
      - format
      - size
      - mode
    PreviewArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/ReadPath'
        rev:
          $ref: '#/components/schemas/Rev'
      required:
      - path
    ListRevisionsArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/PathOrId'
        mode:
          $ref: '#/components/schemas/ListRevisionsMode'
        limit:
          type: integer
          format: int64
          minimum: 1
          maximum: 100
      required:
      - path
      - mode
      - limit
    ListRevisionsResult:
      type: object
      properties:
        is_deleted:
          type: boolean
        server_deleted:
          $ref: '#/components/schemas/DropboxTimestamp'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/FileMetadata'
      required:
      - is_deleted
      - entries
    RestoreArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/WritePath'
        rev:
          $ref: '#/components/schemas/Rev'
      required:
      - path
      - rev
    GetTemporaryLinkArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/ReadPath'
      required:
      - path
    GetTemporaryLinkResult:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/FileMetadata'
        link:
          type: string
      required:
      - metadata
      - link
    GetTemporaryUploadLinkArg:
      type: object
      properties:
        commit_info:
          $ref: '#/components/schemas/CommitInfo'
        duration:
          type: number
          format: double
      required:
      - commit_info
      - duration
    GetTemporaryUploadLinkResult:
      type: object
      properties:
        link:
          type: string
      required:
      - link
    GetCopyReferenceArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/ReadPath'
      required:
      - path
    GetCopyReferenceResult:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        copy_reference:
          type: string
        expires:
          $ref: '#/components/schemas/DropboxTimestamp'
      required:
      - metadata
      - copy_reference
      - expires
    SaveCopyReferenceArg:
      type: object
      properties:
        copy_reference:
          type: string
        path:
          $ref: '#/components/schemas/Path'
      required:
      - copy_reference
      - path
    SaveCopyReferenceResult:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - metadata
    SaveUrlArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/Path'
        url:
          type: string
      required:
      - path
      - url
    AlphaGetMetadataArg:
      allOf:
      - $ref: '#/components/schemas/GetMetadataArg'
      - type: object
        properties:
          include_property_templates:
            type: array
            items:
              $ref: '#/components/schemas/TemplateId'
            nullable: true
    ContentSyncSettingArg:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/FileId'
        sync_setting:
          $ref: '#/components/schemas/SyncSettingArg'
      required:
      - id
      - sync_setting
    ContentSyncSetting:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/FileId'
        sync_setting:
          $ref: '#/components/schemas/SyncSetting'
      required:
      - id
      - sync_setting
    SingleUserLock:
      type: object
      properties:
        created:
          $ref: '#/components/schemas/DropboxTimestamp'
        lock_holder_account_id:
          $ref: '#/components/schemas/AccountId'
        lock_holder_team_id:
          type: string
          nullable: true
      required:
      - created
      - lock_holder_account_id
    FileLock:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/FileLockContent'
      required:
      - content
    UnlockFileArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/WritePathOrId'
      required:
      - path
    LockFileResult:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        lock:
          $ref: '#/components/schemas/FileLock'
      required:
      - metadata
      - lock
    LockConflictError:
      type: object
      properties:
        lock:
          $ref: '#/components/schemas/FileLock'
      required:
      - lock
    LockFileBatchResult:
      allOf:
      - $ref: '#/components/schemas/FileOpsResult'
      - type: object
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/LockFileResultEntry'
        required:
        - entries
    LockFileArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/WritePathOrId'
      required:
      - path
    LockFileBatchArg:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/LockFileArg'
      required:
      - entries
    UnlockFileBatchArg:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/UnlockFileArg'
      required:
      - entries
    PaperCreateArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/Path'
        import_format:
          $ref: '#/components/schemas/ImportFormat'
      required:
      - path
      - import_format
    PaperCreateResult:
      type: object
      properties:
        url:
          type: string
        result_path:
          type: string
        file_id:
          $ref: '#/components/schemas/FileId'
        paper_revision:
          type: integer
          format: int64
      required:
      - url
      - result_path
      - file_id
      - paper_revision
    PaperUpdateArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/WritePathOrId'
        import_format:
          $ref: '#/components/schemas/ImportFormat'
        doc_update_policy:
          $ref: '#/components/schemas/PaperDocUpdatePolicy'
        paper_revision:
          type: integer
          format: int64
          nullable: true
      required:
      - path
      - import_format
      - doc_update_policy
    PaperUpdateResult:
      type: object
      properties:
        paper_revision:
          type: integer
          format: int64
      required:
      - paper_revision
    MetadataV2:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - metadata
      required:
      - .tag
      description: Metadata for a file, folder or other resource types.
      discriminator:
        propertyName: .tag
        mapping:
          metadata: '#/components/schemas/Metadata'
    MediaInfo:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - pending
          - metadata
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          metadata: '#/components/schemas/MediaMetadata'
    GetMetadataError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    ListFolderLongpollError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - reset
      required:
      - .tag
    ListFolderError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - template_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
          template_error: '#/components/schemas/TemplateError'
    ListFolderContinueError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - reset
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    DownloadError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - unsupported_file
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    DownloadZipError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - too_large
          - too_many_files
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    ExportError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - non_exportable
          - invalid_export_format
          - retry_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    UploadError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - properties_error
          - payload_too_large
          - content_hash_mismatch
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/UploadWriteFailed'
          properties_error: '#/components/schemas/InvalidPropertyGroupError'
    UploadSessionStartError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - concurrent_session_data_not_allowed
          - concurrent_session_close_not_allowed
          - payload_too_large
          - content_hash_mismatch
      required:
      - .tag
    UploadSessionLookupError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - not_found
          - incorrect_offset
          - closed
          - not_closed
          - too_large
          - concurrent_session_invalid_offset
          - concurrent_session_invalid_data_size
          - payload_too_large
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          incorrect_offset: '#/components/schemas/UploadSessionOffsetError'
    UploadSessionAppendError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - content_hash_mismatch
      required:
      - .tag
    UploadSessionFinishError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - lookup_failed
          - path
          - properties_error
          - too_many_shared_folder_targets
          - too_many_write_operations
          - concurrent_session_data_not_allowed
          - concurrent_session_not_closed
          - concurrent_session_missing_data
          - payload_too_large
          - content_hash_mismatch
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          lookup_failed: '#/components/schemas/UploadSessionLookupError'
          path: '#/components/schemas/WriteError'
          properties_error: '#/components/schemas/InvalidPropertyGroupError'
    UploadSessionType:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - sequential
          - concurrent
      required:
      - .tag
    WriteMode:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - add
          - overwrite
          - update
      required:
      - .tag
      description: |-
        Your intent when writing a file to some path. This is used to determine
            what constitutes a conflict and what the autorename strategy is.

            In some situations, the conflict behavior is identical:
            (a) If the target path doesn't refer to anything, the file is always written;
            no conflict.
            (b) If the target path refers to a folder, it's always a conflict.
            (c) If the target path refers to a file with identical contents, nothing gets
            written; no conflict.

            The conflict checking differs in the case where there's a file at the target
            path with contents different from the contents you're trying to write.
      discriminator:
        propertyName: .tag
        mapping:
          update: '#/components/schemas/Rev'
    UploadSessionFinishBatchResultEntry:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - success
          - failure
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          success: '#/components/schemas/FileMetadata'
          failure: '#/components/schemas/UploadSessionFinishError'
    UploadSessionFinishBatchJobStatus:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/UploadSessionFinishBatchResult'
    UploadSessionFinishBatchLaunch:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
      required:
      - .tag
      description: |-
        Result returned by :route:`upload_session/finish_batch` that may either launch an
            asynchronous job or complete synchronously.
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/UploadSessionFinishBatchResult'
    SearchMode:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - filename
          - filename_and_content
          - deleted_filename
      required:
      - .tag
    SearchMatchType:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - filename
          - content
          - both
      required:
      - .tag
      description: Indicates what type of match was found for a given item.
    SearchError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - invalid_argument
          - internal_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
          invalid_argument: '#/components/schemas/String?'
    SearchOrderBy:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - relevance
          - last_modified_time
      required:
      - .tag
    FileStatus:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - active
          - deleted
      required:
      - .tag
    FileCategory:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - image
          - document
          - pdf
          - spreadsheet
          - presentation
          - audio
          - video
          - folder
          - paper
          - others
      required:
      - .tag
    SearchMatchTypeV2:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - filename
          - file_content
          - filename_and_content
          - image_content
      required:
      - .tag
      description: Indicates what type of match was found for a given item.
    WriteError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - malformed_path
          - conflict
          - no_write_permission
          - insufficient_space
          - disallowed_name
          - team_folder
          - operation_suppressed
          - too_many_write_operations
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          malformed_path: '#/components/schemas/MalformedPathError'
          conflict: '#/components/schemas/WriteConflictError'
    WriteConflictError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - file
          - folder
          - file_ancestor
      required:
      - .tag
    CreateFolderError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/WriteError'
    CreateFolderEntryError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/WriteError'
    CreateFolderBatchResultEntry:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - success
          - failure
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          success: '#/components/schemas/CreateFolderEntryResult'
          failure: '#/components/schemas/CreateFolderEntryError'
    CreateFolderBatchError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - too_many_files
      required:
      - .tag
    CreateFolderBatchJobStatus:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
          - failed
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/CreateFolderBatchResult'
          failed: '#/components/schemas/CreateFolderBatchError'
    CreateFolderBatchLaunch:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
      required:
      - .tag
      description: |-
        Result returned by :route:`create_folder_batch` that may either launch an
            asynchronous job or complete synchronously.
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/CreateFolderBatchResult'
    DeleteError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path_lookup
          - path_write
          - too_many_write_operations
          - too_many_files
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path_lookup: '#/components/schemas/LookupError'
          path_write: '#/components/schemas/WriteError'
    DeleteBatchResultEntry:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - success
          - failure
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          success: '#/components/schemas/DeleteBatchResultData'
          failure: '#/components/schemas/DeleteError'
    DeleteBatchError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - too_many_write_operations
      required:
      - .tag
    DeleteBatchJobStatus:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
          - failed
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/DeleteBatchResult'
          failed: '#/components/schemas/DeleteBatchError'
    DeleteBatchLaunch:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
      required:
      - .tag
      description: |-
        Result returned by :route:`delete_batch` that may either launch an asynchronous job or complete
            synchronously.
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/DeleteBatchResult'
    RelocationError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - from_lookup
          - from_write
          - to
          - cant_copy_shared_folder
          - cant_nest_shared_folder
          - cant_move_folder_into_itself
          - too_many_files
          - duplicated_or_nested_paths
          - cant_transfer_ownership
          - insufficient_quota
          - internal_error
          - cant_move_shared_folder
          - cant_move_into_vault
          - cant_move_into_family
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          from_lookup: '#/components/schemas/LookupError'
          from_write: '#/components/schemas/WriteError'
          to: '#/components/schemas/WriteError'
          cant_move_into_vault: '#/components/schemas/MoveIntoVaultError'
          cant_move_into_family: '#/components/schemas/MoveIntoFamilyError'
    MoveIntoVaultError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - is_shared_folder
      required:
      - .tag
    MoveIntoFamilyError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - is_shared_folder
      required:
      - .tag
    RelocationBatchV2Launch:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
      required:
      - .tag
      description: |-
        Result returned by :route:`copy_batch:2` or :route:`move_batch:2` that may either launch an
            asynchronous job or complete synchronously.
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/RelocationBatchV2Result'
    RelocationBatchV2JobStatus:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
      required:
      - .tag
      description: |-
        Result returned by :route:`copy_batch/check:2` or :route:`move_batch/check:2` that may either
            be in progress or completed with result for each entry.
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/RelocationBatchV2Result'
    RelocationBatchErrorEntry:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - relocation_error
          - internal_error
          - too_many_write_operations
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          relocation_error: '#/components/schemas/RelocationError'
    RelocationBatchResultEntry:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - success
          - failure
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          success: '#/components/schemas/Metadata'
          failure: '#/components/schemas/RelocationBatchErrorEntry'
    RelocationBatchJobStatus:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
          - failed
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/RelocationBatchResult'
          failed: '#/components/schemas/RelocationBatchError'
    RelocationBatchLaunch:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
      required:
      - .tag
      description: |-
        Result returned by :route:`copy_batch` or :route:`move_batch` that may either launch an
            asynchronous job or complete synchronously.
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/RelocationBatchResult'
    RelocationBatchError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - too_many_write_operations
      required:
      - .tag
    ThumbnailSize:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - w32h32
          - w64h64
          - w128h128
          - w256h256
          - w480h320
          - w640h480
          - w960h640
          - w1024h768
          - w2048h1536
      required:
      - .tag
    ThumbnailFormat:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - jpeg
          - png
      required:
      - .tag
    ThumbnailMode:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - strict
          - bestfit
          - fitone_bestfit
      required:
      - .tag
    GetThumbnailBatchResultEntry:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - success
          - failure
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          success: '#/components/schemas/GetThumbnailBatchResultData'
          failure: '#/components/schemas/ThumbnailError'
    GetThumbnailBatchError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - too_many_files
      required:
      - .tag
    ThumbnailError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - unsupported_extension
          - unsupported_image
          - conversion_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    ThumbnailV2Error:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - unsupported_extension
          - unsupported_image
          - conversion_error
          - access_denied
          - not_found
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    PathOrLink:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - link
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/ReadPath'
          link: '#/components/schemas/SharedLinkFileInfo'
    PreviewError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - in_progress
          - unsupported_extension
          - unsupported_content
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    ListRevisionsMode:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - id
      required:
      - .tag
    ListRevisionsError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    RestoreError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path_lookup
          - path_write
          - invalid_revision
          - in_progress
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path_lookup: '#/components/schemas/LookupError'
          path_write: '#/components/schemas/WriteError'
    GetTemporaryLinkError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - email_not_verified
          - unsupported_file
          - not_allowed
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    GetCopyReferenceError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    SaveCopyReferenceError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - invalid_copy_reference
          - no_permission
          - not_found
          - too_many_files
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/WriteError'
    SaveUrlResult:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/FileMetadata'
    SaveUrlError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - download_failed
          - invalid_url
          - not_found
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/WriteError'
    SaveUrlJobStatus:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
          - failed
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/FileMetadata'
          failed: '#/components/schemas/SaveUrlError'
    AlphaGetMetadataError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - properties_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          properties_error: '#/components/schemas/LookUpPropertiesError'
    SyncSettingArg:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - default
          - not_synced
      required:
      - .tag
    SyncSetting:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - default
          - not_synced
          - not_synced_inactive
      required:
      - .tag
    SyncSettingsError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - unsupported_combination
          - unsupported_configuration
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    FileLockContent:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - unlocked
          - single_user
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          single_user: '#/components/schemas/SingleUserLock'
    LockFileError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path_lookup
          - too_many_write_operations
          - too_many_files
          - no_write_permission
          - cannot_be_locked
          - file_not_shared
          - lock_conflict
          - internal_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path_lookup: '#/components/schemas/LookupError'
          lock_conflict: '#/components/schemas/LockConflictError'
    LockFileResultEntry:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - success
          - failure
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          success: '#/components/schemas/LockFileResult'
          failure: '#/components/schemas/LockFileError'
    ImportFormat:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - html
          - markdown
          - plain_text
      required:
      - .tag
      description: The import format of the incoming data.
    PaperContentError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - insufficient_permissions
          - content_malformed
          - doc_length_exceeded
          - image_size_exceeded
      required:
      - .tag
    PaperCreateError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_path
          - email_unverified
          - invalid_file_extension
          - paper_disabled
      required:
      - .tag
    PaperDocUpdatePolicy:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - append
          - prepend
          - overwrite_all
      required:
      - .tag
    PaperUpdateError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - revision_mismatch
          - doc_archived
          - doc_deleted
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    PathR:
      type: string
    CopyBatchArg:
      allOf:
      - $ref: '#/components/schemas/RelocationBatchArgBase'
    SharedLinkUrl:
      type: string
    Sha256HexHash:
      type: string
      minLength: 64
      maxLength: 64
    SearchV2Cursor:
      type: string
      minLength: 1
    PathROrId:
      type: string
    MalformedPathError:
      type: string
      nullable: true
    WritePathOrId:
      type: string
    FileId:
      type: string
      minLength: 4
    ReadPath:
      allOf:
      - $ref: '#/components/schemas/ReadPath'
    Rev:
      allOf:
      - $ref: '#/components/schemas/Rev'
    WritePath:
      type: string
    Path:
      allOf:
      - $ref: '#/components/schemas/Path'
    ListFolderCursor:
      type: string
      minLength: 1
    UserInfoArgs:
      type: object
      properties: {}
      description: No Parameters
    UserInfoResult:
      type: object
      properties:
        family_name:
          type: string
          nullable: true
        given_name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        email_verified:
          type: boolean
          nullable: true
        iss:
          type: string
        sub:
          type: string
      required:
      - iss
      - sub
    OpenIdError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - incorrect_openid_scopes
      required:
      - .tag
    UserInfoError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - openid_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          openid_error: '#/components/schemas/OpenIdError'
    RefPaperDoc:
      type: object
      properties:
        doc_id:
          $ref: '#/components/schemas/PaperDocId'
      required:
      - doc_id
    ListPaperDocsArgs:
      type: object
      properties:
        filter_by:
          $ref: '#/components/schemas/ListPaperDocsFilterBy'
        sort_by:
          $ref: '#/components/schemas/ListPaperDocsSortBy'
        sort_order:
          $ref: '#/components/schemas/ListPaperDocsSortOrder'
        limit:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
      required:
      - filter_by
      - sort_by
      - sort_order
      - limit
    ListPaperDocsContinueArgs:
      type: object
      properties:
        cursor:
          type: string
      required:
      - cursor
    Cursor:
      type: object
      properties:
        value:
          type: string
        expiration:
          $ref: '#/components/schemas/DropboxTimestamp'
      required:
      - value
    ListPaperDocsResponse:
      type: object
      properties:
        doc_ids:
          type: array
          items:
            $ref: '#/components/schemas/PaperDocId'
        cursor:
          $ref: '#/components/schemas/Cursor'
        has_more:
          type: boolean
      required:
      - doc_ids
      - cursor
      - has_more
    PaperDocExport:
      allOf:
      - $ref: '#/components/schemas/RefPaperDoc'
      - type: object
        properties:
          export_format:
            $ref: '#/components/schemas/ExportFormat'
        required:
        - export_format
    PaperDocExportResult:
      type: object
      properties:
        owner:
          type: string
        title:
          type: string
        revision:
          type: integer
          format: int64
        mime_type:
          type: string
      required:
      - owner
      - title
      - revision
      - mime_type
    SharingPolicy:
      type: object
      properties:
        public_sharing_policy:
          $ref: '#/components/schemas/SharingPublicPolicyType'
        team_sharing_policy:
          $ref: '#/components/schemas/SharingTeamPolicyType'
      description: Sharing policy of Paper doc.
    Folder:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
      - id
      - name
      description: Data structure representing a Paper folder.
    FoldersContainingPaperDoc:
      type: object
      properties:
        folder_sharing_policy_type:
          $ref: '#/components/schemas/FolderSharingPolicyType'
        folders:
          type: array
          items:
            $ref: '#/components/schemas/Folder'
          nullable: true
      description: Metadata about Paper folders containing the specififed Paper doc.
    PaperDocSharingPolicy:
      allOf:
      - $ref: '#/components/schemas/RefPaperDoc'
      - type: object
        properties:
          sharing_policy:
            $ref: '#/components/schemas/SharingPolicy'
        required:
        - sharing_policy
    RemovePaperDocUser:
      allOf:
      - $ref: '#/components/schemas/RefPaperDoc'
      - type: object
        properties:
          member:
            $ref: '#/components/schemas/MemberSelector'
        required:
        - member
    AddMember:
      type: object
      properties:
        member:
          $ref: '#/components/schemas/MemberSelector'
        access_level:
          $ref: '#/components/schemas/AccessLevel'
      required:
      - member
      - access_level
      description: The member and type of access the member should have when added to a shared folder.
    ListUsersOnPaperDocArgs:
      allOf:
      - $ref: '#/components/schemas/RefPaperDoc'
      - type: object
        properties:
          limit:
            type: integer
            format: int32
            minimum: 1
            maximum: 1000
          filter_by:
            $ref: '#/components/schemas/UserOnPaperDocFilter'
        required:
        - limit
        - filter_by
    ListUsersOnPaperDocContinueArgs:
      allOf:
      - $ref: '#/components/schemas/RefPaperDoc'
      - type: object
        properties:
          cursor:
            type: string
        required:
        - cursor
    InviteeInfoWithPermissionLevel:
      type: object
      properties:
        invitee:
          $ref: '#/components/schemas/InviteeInfo'
        permission_level:
          $ref: '#/components/schemas/PaperDocPermissionLevel'
      required:
      - invitee
      - permission_level
    UserInfoWithPermissionLevel:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserInfo'
        permission_level:
          $ref: '#/components/schemas/PaperDocPermissionLevel'
      required:
      - user
      - permission_level
    ListUsersOnPaperDocResponse:
      type: object
      properties:
        invitees:
          type: array
          items:
            $ref: '#/components/schemas/InviteeInfoWithPermissionLevel'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserInfoWithPermissionLevel'
        doc_owner:
          $ref: '#/components/schemas/UserInfo'
        cursor:
          $ref: '#/components/schemas/Cursor'
        has_more:
          type: boolean
      required:
      - invitees
      - users
      - doc_owner
      - cursor
      - has_more
    AddPaperDocUser:
      allOf:
      - $ref: '#/components/schemas/RefPaperDoc'
      - type: object
        properties:
          members:
            type: array
            items:
              $ref: '#/components/schemas/AddMember'
          custom_message:
            type: string
            nullable: true
          quiet:
            type: boolean
        required:
        - members
        - quiet
    AddPaperDocUserMemberResult:
      type: object
      properties:
        member:
          $ref: '#/components/schemas/MemberSelector'
        result:
          $ref: '#/components/schemas/AddPaperDocUserResult'
      required:
      - member
      - result
      description: Per-member result for :route:`docs/users/add`.
    ListUsersOnFolderResponse:
      type: object
      properties:
        invitees:
          type: array
          items:
            $ref: '#/components/schemas/InviteeInfo'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'
        cursor:
          $ref: '#/components/schemas/Cursor'
        has_more:
          type: boolean
      required:
      - invitees
      - users
      - cursor
      - has_more
    ListUsersOnFolderArgs:
      allOf:
      - $ref: '#/components/schemas/RefPaperDoc'
      - type: object
        properties:
          limit:
            type: integer
            format: int32
            minimum: 1
            maximum: 1000
        required:
        - limit
    ListUsersOnFolderContinueArgs:
      allOf:
      - $ref: '#/components/schemas/RefPaperDoc'
      - type: object
        properties:
          cursor:
            type: string
        required:
        - cursor
    PaperDocCreateArgs:
      type: object
      properties:
        parent_folder_id:
          type: string
          nullable: true
        import_format:
          $ref: '#/components/schemas/ImportFormat'
      required:
      - import_format
    PaperDocCreateUpdateResult:
      type: object
      properties:
        doc_id:
          type: string
        revision:
          type: integer
          format: int64
        title:
          type: string
      required:
      - doc_id
      - revision
      - title
    PaperDocUpdateArgs:
      allOf:
      - $ref: '#/components/schemas/RefPaperDoc'
      - type: object
        properties:
          doc_update_policy:
            $ref: '#/components/schemas/PaperDocUpdatePolicy'
          revision:
            type: integer
            format: int64
          import_format:
            $ref: '#/components/schemas/ImportFormat'
        required:
        - doc_update_policy
        - revision
        - import_format
    PaperFolderCreateArg:
      type: object
      properties:
        name:
          type: string
        parent_folder_id:
          type: string
          nullable: true
        is_team_folder:
          type: boolean
          nullable: true
      required:
      - name
    PaperFolderCreateResult:
      type: object
      properties:
        folder_id:
          type: string
      required:
      - folder_id
    ListPaperDocsFilterBy:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - docs_accessed
          - docs_created
      required:
      - .tag
    ListPaperDocsSortBy:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - accessed
          - modified
          - created
      required:
      - .tag
    ListPaperDocsSortOrder:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - ascending
          - descending
      required:
      - .tag
    ExportFormat:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - html
          - markdown
      required:
      - .tag
      description: The desired export format of the Paper doc.
    DocSubscriptionLevel:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - default
          - ignore
          - every
          - no_email
      required:
      - .tag
      description: The subscription level of a Paper doc.
    FolderSubscriptionLevel:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - none
          - activity_only
          - daily_emails
          - weekly_emails
      required:
      - .tag
      description: The subscription level of a Paper folder.
    FolderSharingPolicyType:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - team
          - invite_only
      required:
      - .tag
      description: |-
        The sharing policy of a Paper folder.

            The sharing policy of subfolders is inherited from the root folder.
    SharingTeamPolicyType:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - people_with_link_can_edit
          - people_with_link_can_view_and_comment
          - invite_only
      required:
      - .tag
      description: The sharing policy type of the Paper doc.
    SharingPublicPolicyType:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - disabled
      required:
      - .tag
    PaperDocPermissionLevel:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - edit
          - view_and_comment
      required:
      - .tag
    UserOnPaperDocFilter:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - visited
          - shared
      required:
      - .tag
    AddPaperDocUserResult:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - success
          - unknown_error
          - sharing_outside_team_disabled
          - daily_limit_reached
          - user_is_owner
          - failed_user_data_retrieval
          - permission_already_granted
      required:
      - .tag
    PaperApiBaseError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - insufficient_permissions
      required:
      - .tag
    PaperApiCursorError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - expired_cursor
          - invalid_cursor
          - wrong_user_in_cursor
          - reset
      required:
      - .tag
    DocLookupError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - doc_not_found
      required:
      - .tag
    ListDocsCursorError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - cursor_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          cursor_error: '#/components/schemas/PaperApiCursorError'
    ListUsersCursorError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - doc_not_found
          - cursor_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          cursor_error: '#/components/schemas/PaperApiCursorError'
    PaperDocCreateError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - content_malformed
          - folder_not_found
          - doc_length_exceeded
          - image_size_exceeded
      required:
      - .tag
    PaperDocUpdateError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - content_malformed
          - revision_mismatch
          - doc_length_exceeded
          - image_size_exceeded
          - doc_archived
          - doc_deleted
      required:
      - .tag
    PaperFolderCreateError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - folder_not_found
          - invalid_folder_id
      required:
      - .tag
    PaperDocId:
      type: string
    SecondaryEmail:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/EmailAddress'
        is_verified:
          type: boolean
      required:
      - email
      - is_verified
    PlatformType:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - web
          - desktop
          - mobile_ios
          - mobile_android
          - api
          - unknown
          - mobile
      required:
      - .tag
      description: Possible platforms on which a user may view content.
    LinkSettings:
      type: object
      properties:
        access_level:
          $ref: '#/components/schemas/AccessLevel'
        audience:
          $ref: '#/components/schemas/LinkAudience'
        expiry:
          $ref: '#/components/schemas/LinkExpiry'
        password:
          $ref: '#/components/schemas/LinkPassword'
      description: Settings that apply to a link.
    LinkPermission:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/LinkAction'
        allow:
          type: boolean
        reason:
          $ref: '#/components/schemas/PermissionDeniedReason'
      required:
      - action
      - allow
      description: Permissions for actions that can be performed on a link.
    SharedContentLinkMetadataBase:
      type: object
      properties:
        access_level:
          $ref: '#/components/schemas/AccessLevel'
        audience_options:
          type: array
          items:
            $ref: '#/components/schemas/LinkAudience'
        audience_restricting_shared_folder:
          $ref: '#/components/schemas/AudienceRestrictingSharedFolder'
        current_audience:
          $ref: '#/components/schemas/LinkAudience'
        expiry:
          $ref: '#/components/schemas/DropboxTimestamp'
        link_permissions:
          type: array
          items:
            $ref: '#/components/schemas/LinkPermission'
        password_protected:
          type: boolean
      required:
      - audience_options
      - current_audience
      - link_permissions
      - password_protected
    SharedContentLinkMetadata:
      allOf:
      - $ref: '#/components/schemas/SharedContentLinkMetadataBase'
      - type: object
        properties:
          audience_exceptions:
            $ref: '#/components/schemas/AudienceExceptions'
          url:
            type: string
        required:
        - url
        description: Metadata of a shared link for a file or folder.
      description: Metadata of a shared link for a file or folder.
    ExpectedSharedContentLinkMetadata:
      allOf:
      - $ref: '#/components/schemas/SharedContentLinkMetadataBase'
      - type: object
        properties: {}
        description: |-
          The expected metadata of a shared link for a file or folder when a link is first created for
              the content. Absent if the link already exists.
      description: |-
        The expected metadata of a shared link for a file or folder when a link is first created for
            the content. Absent if the link already exists.
    AudienceRestrictingSharedFolder:
      type: object
      properties:
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        name:
          type: string
        audience:
          $ref: '#/components/schemas/LinkAudience'
      required:
      - shared_folder_id
      - name
      - audience
      description: |-
        Information about the shared folder that prevents the link audience for this link from being
            more restrictive.
    AudienceExceptions:
      type: object
      properties:
        count:
          type: integer
          format: int64
        exceptions:
          type: array
          items:
            $ref: '#/components/schemas/AudienceExceptionContentInfo'
      required:
      - count
      - exceptions
      description: |-
        The total count and truncated list of information of content inside this folder that has a
            different audience than the link on this folder. This is only returned for folders.
    AudienceExceptionContentInfo:
      type: object
      properties:
        name:
          type: string
      required:
      - name
      description: Information about the content that has a link audience different than that of this folder.
    LinkExpiry:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - remove_expiry
          - set_expiry
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          set_expiry: '#/components/schemas/DropboxTimestamp'
    LinkPassword:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - remove_password
          - set_password
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          set_password: '#/components/schemas/String'
    LinkAudience:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - public
          - team
          - no_one
          - password
          - members
      required:
      - .tag
    LinkAction:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - change_access_level
          - change_audience
          - remove_expiry
          - remove_password
          - set_expiry
          - set_password
      required:
      - .tag
      description: Actions that can be performed on a link.
    GetSharedLinkMetadataArg:
      type: object
      properties:
        url:
          type: string
        path:
          $ref: '#/components/schemas/Path'
        link_password:
          type: string
          nullable: true
      required:
      - url
    LinkPermissions:
      type: object
      properties:
        resolved_visibility:
          $ref: '#/components/schemas/ResolvedVisibility'
        requested_visibility:
          $ref: '#/components/schemas/RequestedVisibility'
        can_revoke:
          type: boolean
        revoke_failure_reason:
          $ref: '#/components/schemas/SharedLinkAccessFailureReason'
        effective_audience:
          $ref: '#/components/schemas/LinkAudience'
        link_access_level:
          $ref: '#/components/schemas/LinkAccessLevel'
        visibility_policies:
          type: array
          items:
            $ref: '#/components/schemas/VisibilityPolicy'
        can_set_expiry:
          type: boolean
        can_remove_expiry:
          type: boolean
        allow_download:
          type: boolean
        can_allow_download:
          type: boolean
        can_disallow_download:
          type: boolean
        allow_comments:
          type: boolean
        team_restricts_comments:
          type: boolean
        audience_options:
          type: array
          items:
            $ref: '#/components/schemas/LinkAudienceOption'
          nullable: true
        can_set_password:
          type: boolean
          nullable: true
        can_remove_password:
          type: boolean
          nullable: true
        require_password:
          type: boolean
          nullable: true
        can_use_extended_sharing_controls:
          type: boolean
          nullable: true
      required:
      - can_revoke
      - visibility_policies
      - can_set_expiry
      - can_remove_expiry
      - allow_download
      - can_allow_download
      - can_disallow_download
      - allow_comments
      - team_restricts_comments
    TeamMemberInfo:
      type: object
      properties:
        team_info:
          $ref: '#/components/schemas/TeamInfo'
        display_name:
          type: string
        member_id:
          type: string
          nullable: true
      required:
      - team_info
      - display_name
      description: Information about a team member.
    SharedLinkMetadata:
      type: object
      properties:
        url:
          type: string
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        expires:
          $ref: '#/components/schemas/DropboxTimestamp'
        path_lower:
          type: string
          nullable: true
        link_permissions:
          $ref: '#/components/schemas/LinkPermissions'
        team_member_info:
          $ref: '#/components/schemas/TeamMemberInfo'
        content_owner_team_info:
          $ref: '#/components/schemas/TeamInfo'
      required:
      - url
      - name
      - link_permissions
      description: The metadata of a shared link.
    FileLinkMetadata:
      allOf:
      - $ref: '#/components/schemas/SharedLinkMetadata'
      - type: object
        properties:
          client_modified:
            $ref: '#/components/schemas/DropboxTimestamp'
          server_modified:
            $ref: '#/components/schemas/DropboxTimestamp'
          rev:
            $ref: '#/components/schemas/Rev'
          size:
            type: integer
            format: int64
        required:
        - client_modified
        - server_modified
        - rev
        - size
        description: The metadata of a file shared link.
      description: The metadata of a file shared link.
    FolderLinkMetadata:
      allOf:
      - $ref: '#/components/schemas/SharedLinkMetadata'
      - type: object
        properties: {}
        description: The metadata of a folder shared link.
      description: The metadata of a folder shared link.
    ListSharedLinksArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/ReadPath'
        cursor:
          type: string
          nullable: true
        direct_only:
          type: boolean
          nullable: true
    ListSharedLinksResult:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/SharedLinkMetadata'
        has_more:
          type: boolean
        cursor:
          type: string
          nullable: true
      required:
      - links
      - has_more
    SharedLinkSettings:
      type: object
      properties:
        require_password:
          type: boolean
          nullable: true
        link_password:
          type: string
          nullable: true
        expires:
          $ref: '#/components/schemas/DropboxTimestamp'
        audience:
          $ref: '#/components/schemas/LinkAudience'
        access:
          $ref: '#/components/schemas/RequestedLinkAccessLevel'
        requested_visibility:
          $ref: '#/components/schemas/RequestedVisibility'
        allow_download:
          type: boolean
          nullable: true
    ModifySharedLinkSettingsArgs:
      type: object
      properties:
        url:
          type: string
        settings:
          $ref: '#/components/schemas/SharedLinkSettings'
        remove_expiration:
          type: boolean
      required:
      - url
      - settings
      - remove_expiration
    CreateSharedLinkWithSettingsArg:
      type: object
      properties:
        path:
          $ref: '#/components/schemas/ReadPath'
        settings:
          $ref: '#/components/schemas/SharedLinkSettings'
      required:
      - path
    RevokeSharedLinkArg:
      type: object
      properties:
        url:
          type: string
      required:
      - url
    LinkMetadata:
      type: object
      properties:
        url:
          type: string
        visibility:
          $ref: '#/components/schemas/Visibility'
        expires:
          $ref: '#/components/schemas/DropboxTimestamp'
      required:
      - url
      - visibility
      description: |-
        Metadata for a shared link. This can be either a
            :type:`PathLinkMetadata` or :type:`CollectionLinkMetadata`.
    PathLinkMetadata:
      allOf:
      - $ref: '#/components/schemas/LinkMetadata'
      - type: object
        properties:
          path:
            type: string
        required:
        - path
        description: Metadata for a path-based shared link.
      description: Metadata for a path-based shared link.
    CollectionLinkMetadata:
      allOf:
      - $ref: '#/components/schemas/LinkMetadata'
      - type: object
        properties: {}
        description: Metadata for a collection-based shared link.
      description: Metadata for a collection-based shared link.
    GetSharedLinksArg:
      type: object
      properties:
        path:
          type: string
          nullable: true
    GetSharedLinksResult:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkMetadata'
      required:
      - links
    CreateSharedLinkArg:
      type: object
      properties:
        path:
          type: string
        short_url:
          type: boolean
        pending_upload:
          $ref: '#/components/schemas/PendingUploadMode'
      required:
      - path
      - short_url
    LinkAudienceOption:
      type: object
      properties:
        audience:
          $ref: '#/components/schemas/LinkAudience'
        allowed:
          type: boolean
        disallowed_reason:
          $ref: '#/components/schemas/LinkAudienceDisallowedReason'
      required:
      - audience
      - allowed
    VisibilityPolicy:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/RequestedVisibility'
        resolved_policy:
          $ref: '#/components/schemas/AlphaResolvedVisibility'
        allowed:
          type: boolean
        disallowed_reason:
          $ref: '#/components/schemas/VisibilityPolicyDisallowedReason'
      required:
      - policy
      - resolved_policy
      - allowed
    RequestedVisibility:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - public
          - team_only
          - password
      required:
      - .tag
      description: |-
        The access permission that can be requested by the caller for the shared link.
            Note that the final resolved visibility of the shared link takes into account other aspects,
            such as team and shared folder settings.
            Check the :type:`ResolvedVisibility` for more info on the possible resolved visibility values
            of shared links.
    ResolvedVisibility:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - team_and_password
          - shared_folder_only
          - no_one
          - only_you
      required:
      - .tag
      description: |-
        The actual access permissions values of shared links after taking into account user
            preferences and the team and shared folder settings.
            Check the :type:`RequestedVisibility` for more info on the possible visibility values
            that can be set by the shared link's owner.
    SharedLinkAccessFailureReason:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - login_required
          - email_verify_required
          - password_required
          - team_only
          - owner_only
      required:
      - .tag
    SharedLinkError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - shared_link_not_found
          - shared_link_access_denied
          - unsupported_link_type
      required:
      - .tag
    ListSharedLinksError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - reset
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    LinkAccessLevel:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - viewer
          - editor
      required:
      - .tag
    RequestedLinkAccessLevel:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - viewer
          - editor
          - max
          - default
      required:
      - .tag
    SharedLinkSettingsError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_settings
          - not_authorized
      required:
      - .tag
    ModifySharedLinkSettingsError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - settings_error
          - email_not_verified
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          settings_error: '#/components/schemas/SharedLinkSettingsError'
    SharedLinkAlreadyExistsMetadata:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - metadata
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          metadata: '#/components/schemas/SharedLinkMetadata'
    CreateSharedLinkWithSettingsError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
          - email_not_verified
          - shared_link_already_exists
          - settings_error
          - access_denied
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
          shared_link_already_exists: '#/components/schemas/SharedLinkAlreadyExistsMetadata?'
          settings_error: '#/components/schemas/SharedLinkSettingsError'
    RevokeSharedLinkError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - shared_link_malformed
      required:
      - .tag
    GetSharedLinkFileError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - shared_link_is_directory
      required:
      - .tag
    Visibility:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - public
          - team_only
          - password
          - team_and_password
          - shared_folder_only
      required:
      - .tag
      description: |-
        Who can access a shared link.
            The most open visibility is :field:`public`.
            The default depends on many aspects, such as team and user
            preferences and shared folder settings.
    GetSharedLinksError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/MalformedPathError'
    PendingUploadMode:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - file
          - folder
      required:
      - .tag
      description: Flag to indicate pending upload default (for linking to not-yet-existing paths).
    CreateSharedLinkError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - path
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          path: '#/components/schemas/LookupError'
    VisibilityPolicyDisallowedReason:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - delete_and_recreate
          - restricted_by_shared_folder
          - restricted_by_team
          - user_not_on_team
          - user_account_type
          - permission_denied
      required:
      - .tag
    LinkAudienceDisallowedReason:
      type: object
      properties:
        .tag:
          type: string
          enum: []
      required:
      - .tag
      description: check documentation for VisibilityPolicyDisallowedReason.
    AlphaResolvedVisibility:
      type: object
      properties:
        .tag:
          type: string
          enum: []
      required:
      - .tag
      description: check documentation for ResolvedVisibility.
    GetSharedLinkFileArg:
      allOf:
      - $ref: '#/components/schemas/GetSharedLinkMetadataArg'
    TeamInfo:
      allOf:
      - $ref: '#/components/schemas/Team'
    FilePermission:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/FileAction'
        allow:
          type: boolean
        reason:
          $ref: '#/components/schemas/PermissionDeniedReason'
      required:
      - action
      - allow
      description: Whether the user is allowed to take the sharing action on the file.
    SharedFileMetadata:
      type: object
      properties:
        access_type:
          $ref: '#/components/schemas/AccessLevel'
        id:
          $ref: '#/components/schemas/FileId'
        expected_link_metadata:
          $ref: '#/components/schemas/ExpectedSharedContentLinkMetadata'
        link_metadata:
          $ref: '#/components/schemas/SharedContentLinkMetadata'
        name:
          type: string
        owner_display_names:
          type: array
          items:
            type: string
          nullable: true
        owner_team:
          $ref: '#/components/schemas/Team'
        parent_shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        path_display:
          type: string
          nullable: true
        path_lower:
          type: string
          nullable: true
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/FilePermission'
          nullable: true
        policy:
          $ref: '#/components/schemas/FolderPolicy'
        preview_url:
          type: string
        time_invited:
          $ref: '#/components/schemas/DropboxTimestamp'
      required:
      - id
      - name
      - policy
      - preview_url
      description: Properties of the shared file.
    FileMemberActionResult:
      type: object
      properties:
        member:
          $ref: '#/components/schemas/MemberSelector'
        result:
          $ref: '#/components/schemas/FileMemberActionIndividualResult'
        sckey_sha1:
          type: string
          nullable: true
        invitation_signature:
          type: array
          items:
            type: string
          nullable: true
      required:
      - member
      - result
      description: Per-member result for :route:`add_file_member`.
    AddFileMemberArgs:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/PathOrId'
        members:
          type: array
          items:
            $ref: '#/components/schemas/MemberSelector'
        custom_message:
          type: string
          nullable: true
        quiet:
          type: boolean
        access_level:
          $ref: '#/components/schemas/AccessLevel'
        add_message_as_comment:
          type: boolean
      required:
      - file
      - members
      - quiet
      - access_level
      - add_message_as_comment
      description: Arguments for :route:`add_file_member`.
    UpdateFileMemberArgs:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/PathOrId'
        member:
          $ref: '#/components/schemas/MemberSelector'
        access_level:
          $ref: '#/components/schemas/AccessLevel'
      required:
      - file
      - member
      - access_level
      description: Arguments for :route:`update_file_member`.
    GetFileMetadataArg:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/PathOrId'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/FileAction'
          nullable: true
      required:
      - file
      description: Arguments of :route:`get_file_metadata`.
    GetFileMetadataBatchArg:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/PathOrId'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/FileAction'
          nullable: true
      required:
      - files
      description: Arguments of :route:`get_file_metadata/batch`.
    GetFileMetadataBatchResult:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/PathOrId'
        result:
          $ref: '#/components/schemas/GetFileMetadataIndividualResult'
      required:
      - file
      - result
      description: Per file results of :route:`get_file_metadata/batch`.
    ListFileMembersArg:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/PathOrId'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/MemberAction'
          nullable: true
        include_inherited:
          type: boolean
        limit:
          type: integer
          format: int32
          minimum: 1
          maximum: 300
      required:
      - file
      - include_inherited
      - limit
      description: Arguments for :route:`list_file_members`.
    SharedFileMembers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserFileMembershipInfo'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupMembershipInfo'
        invitees:
          type: array
          items:
            $ref: '#/components/schemas/InviteeMembershipInfo'
        cursor:
          type: string
          nullable: true
      required:
      - users
      - groups
      - invitees
      description: |-
        Shared file user, group, and invitee membership.

            Used for the results of :route:`list_file_members` and
            :route:`list_file_members/continue`, and used as part of the results
            for :route:`list_file_members/batch`.
    UserFileMembershipInfo:
      allOf:
      - $ref: '#/components/schemas/UserMembershipInfo'
      - type: object
        properties:
          time_last_seen:
            $ref: '#/components/schemas/DropboxTimestamp'
          platform_type:
            $ref: '#/components/schemas/PlatformType'
        description: The information about a user member of the shared content with an appended last seen timestamp.
      description: The information about a user member of the shared content with an appended last seen timestamp.
    ListFileMembersBatchArg:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/PathOrId'
        limit:
          type: integer
          format: int32
          maximum: 20
      required:
      - files
      - limit
      description: Arguments for :route:`list_file_members/batch`.
    ListFileMembersBatchResult:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/PathOrId'
        result:
          $ref: '#/components/schemas/ListFileMembersIndividualResult'
      required:
      - file
      - result
      description: Per-file result for :route:`list_file_members/batch`.
    ListFileMembersCountResult:
      type: object
      properties:
        members:
          $ref: '#/components/schemas/SharedFileMembers'
        member_count:
          type: integer
          format: int64
      required:
      - members
      - member_count
    ListFileMembersContinueArg:
      type: object
      properties:
        cursor:
          type: string
      required:
      - cursor
      description: Arguments for :route:`list_file_members/continue`.
    ListFilesArg:
      type: object
      properties:
        limit:
          type: integer
          format: int32
          minimum: 1
          maximum: 300
        actions:
          type: array
          items:
            $ref: '#/components/schemas/FileAction'
          nullable: true
      required:
      - limit
      description: Arguments for :route:`list_received_files`.
    ListFilesResult:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SharedFileMetadata'
        cursor:
          type: string
          nullable: true
      required:
      - entries
      description: Success results for :route:`list_received_files`.
    ListFilesContinueArg:
      type: object
      properties:
        cursor:
          type: string
      required:
      - cursor
      description: Arguments for :route:`list_received_files/continue`.
    RemoveFileMemberArg:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/PathOrId'
        member:
          $ref: '#/components/schemas/MemberSelector'
      required:
      - file
      - member
      description: Arguments for :route:`remove_file_member_2`.
    RelinquishFileMembershipArg:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/PathOrId'
      required:
      - file
    UnshareFileArg:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/PathOrId'
      required:
      - file
      description: Arguments for :route:`unshare_file`.
    SharingUserError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - email_unverified
      required:
      - .tag
      description: User account had a problem preventing this action.
    SharingFileAccessError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - no_permission
          - invalid_file
          - is_folder
          - inside_public_folder
          - inside_osx_package
      required:
      - .tag
      description: User could not access this file.
    FileErrorResult:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - file_not_found_error
          - invalid_file_action_error
          - permission_denied_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          file_not_found_error: '#/components/schemas/Id'
          invalid_file_action_error: '#/components/schemas/Id'
          permission_denied_error: '#/components/schemas/Id'
    FileAction:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - disable_viewer_info
          - edit_contents
          - enable_viewer_info
          - invite_viewer
          - invite_viewer_no_comment
          - invite_editor
          - unshare
          - relinquish_membership
          - share_link
          - create_link
          - create_view_link
          - create_edit_link
      required:
      - .tag
      description: Sharing actions that may be taken on files.
    ViewerInfoPolicy:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - enabled
          - disabled
      required:
      - .tag
    FileMemberActionIndividualResult:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - success
          - member_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          success: '#/components/schemas/AccessLevel?'
          member_error: '#/components/schemas/FileMemberActionError'
    FileMemberRemoveActionResult:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - success
          - member_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          success: '#/components/schemas/MemberAccessLevelResult'
          member_error: '#/components/schemas/FileMemberActionError'
    AddFileMemberError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - user_error
          - access_error
          - rate_limit
          - invalid_comment
      required:
      - .tag
      description: Errors for :route:`add_file_member`.
      discriminator:
        propertyName: .tag
        mapping:
          user_error: '#/components/schemas/SharingUserError'
          access_error: '#/components/schemas/SharingFileAccessError'
    RemoveFileMemberError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - user_error
          - access_error
          - no_explicit_access
      required:
      - .tag
      description: Errors for :route:`remove_file_member_2`.
      discriminator:
        propertyName: .tag
        mapping:
          user_error: '#/components/schemas/SharingUserError'
          access_error: '#/components/schemas/SharingFileAccessError'
          no_explicit_access: '#/components/schemas/MemberAccessLevelResult'
    FileMemberActionError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_member
          - no_permission
          - access_error
          - no_explicit_access
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharingFileAccessError'
          no_explicit_access: '#/components/schemas/MemberAccessLevelResult'
    GetFileMetadataError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - user_error
          - access_error
      required:
      - .tag
      description: Error result for :route:`get_file_metadata`.
      discriminator:
        propertyName: .tag
        mapping:
          user_error: '#/components/schemas/SharingUserError'
          access_error: '#/components/schemas/SharingFileAccessError'
    GetFileMetadataIndividualResult:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - metadata
          - access_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          metadata: '#/components/schemas/SharedFileMetadata'
          access_error: '#/components/schemas/SharingFileAccessError'
    ListFileMembersError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - user_error
          - access_error
      required:
      - .tag
      description: Error for :route:`list_file_members`.
      discriminator:
        propertyName: .tag
        mapping:
          user_error: '#/components/schemas/SharingUserError'
          access_error: '#/components/schemas/SharingFileAccessError'
    ListFileMembersIndividualResult:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - result
          - access_error
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          result: '#/components/schemas/ListFileMembersCountResult'
          access_error: '#/components/schemas/SharingFileAccessError'
    ListFileMembersContinueError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - user_error
          - access_error
          - invalid_cursor
      required:
      - .tag
      description: Error for :route:`list_file_members/continue`.
      discriminator:
        propertyName: .tag
        mapping:
          user_error: '#/components/schemas/SharingUserError'
          access_error: '#/components/schemas/SharingFileAccessError'
    ListFilesContinueError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - user_error
          - invalid_cursor
      required:
      - .tag
      description: Error results for :route:`list_received_files/continue`.
      discriminator:
        propertyName: .tag
        mapping:
          user_error: '#/components/schemas/SharingUserError'
    RelinquishFileMembershipError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - group_access
          - no_permission
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharingFileAccessError'
    UnshareFileError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - user_error
          - access_error
      required:
      - .tag
      description: Error result for :route:`unshare_file`.
      discriminator:
        propertyName: .tag
        mapping:
          user_error: '#/components/schemas/SharingUserError'
          access_error: '#/components/schemas/SharingFileAccessError'
    FolderPolicy:
      type: object
      properties:
        member_policy:
          $ref: '#/components/schemas/MemberPolicy'
        resolved_member_policy:
          $ref: '#/components/schemas/MemberPolicy'
        acl_update_policy:
          $ref: '#/components/schemas/AclUpdatePolicy'
        shared_link_policy:
          $ref: '#/components/schemas/SharedLinkPolicy'
        viewer_info_policy:
          $ref: '#/components/schemas/ViewerInfoPolicy'
      required:
      - acl_update_policy
      - shared_link_policy
      description: |-
        A set of policies governing membership and privileges for a shared
            folder.
    FolderPermission:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/FolderAction'
        allow:
          type: boolean
        reason:
          $ref: '#/components/schemas/PermissionDeniedReason'
      required:
      - action
      - allow
      description: Whether the user is allowed to take the action on the shared folder.
    MemberPermission:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/MemberAction'
        allow:
          type: boolean
        reason:
          $ref: '#/components/schemas/PermissionDeniedReason'
      required:
      - action
      - allow
      description: Whether the user is allowed to take the action on the associated member.
    InsufficientPlan:
      type: object
      properties:
        message:
          type: string
        upsell_url:
          type: string
          nullable: true
      required:
      - message
    MembershipInfo:
      type: object
      properties:
        access_type:
          $ref: '#/components/schemas/AccessLevel'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/MemberPermission'
          nullable: true
        initials:
          type: string
          nullable: true
        is_inherited:
          type: boolean
      required:
      - access_type
      - is_inherited
      description: The information about a member of the shared content.
    UserInfo:
      type: object
      properties:
        account_id:
          $ref: '#/components/schemas/AccountId'
        email:
          type: string
        display_name:
          type: string
        same_team:
          type: boolean
        team_member_id:
          type: string
          nullable: true
      required:
      - account_id
      - email
      - display_name
      - same_team
      description: |-
        Basic information about a user. Use :route:`users.get_account` and
            :route:`users.get_account_batch` to obtain more detailed information.
    UserMembershipInfo:
      allOf:
      - $ref: '#/components/schemas/MembershipInfo'
      - type: object
        properties:
          user:
            $ref: '#/components/schemas/UserInfo'
        required:
        - user
        description: The information about a user member of the shared content.
      description: The information about a user member of the shared content.
    InviteeMembershipInfo:
      allOf:
      - $ref: '#/components/schemas/MembershipInfo'
      - type: object
        properties:
          invitee:
            $ref: '#/components/schemas/InviteeInfo'
          user:
            $ref: '#/components/schemas/UserInfo'
        required:
        - invitee
        description: Information about an invited member of a shared content.
      description: Information about an invited member of a shared content.
    GroupInfo:
      allOf:
      - $ref: '#/components/schemas/teamcommonGroupSummary'
      - type: object
        properties:
          group_type:
            $ref: '#/components/schemas/teamcommonGroupType'
          is_member:
            type: boolean
          is_owner:
            type: boolean
          same_team:
            type: boolean
        required:
        - group_type
        - is_member
        - is_owner
        - same_team
        description: |-
          The information about a group. Groups is a way to manage a list of users
               who need same access permission to the shared folder.
      description: |-
        The information about a group. Groups is a way to manage a list of users
             who need same access permission to the shared folder.
    GroupMembershipInfo:
      allOf:
      - $ref: '#/components/schemas/MembershipInfo'
      - type: object
        properties:
          group:
            $ref: '#/components/schemas/GroupInfo'
        required:
        - group
        description: The information about a group member of the shared content.
      description: The information about a group member of the shared content.
    SharedFolderMetadataBase:
      type: object
      properties:
        access_type:
          $ref: '#/components/schemas/AccessLevel'
        is_inside_team_folder:
          type: boolean
        is_team_folder:
          type: boolean
        owner_display_names:
          type: array
          items:
            type: string
          nullable: true
        owner_team:
          $ref: '#/components/schemas/Team'
        parent_shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        path_display:
          type: string
          nullable: true
        path_lower:
          type: string
          nullable: true
        parent_folder_name:
          type: string
          nullable: true
      required:
      - access_type
      - is_inside_team_folder
      - is_team_folder
      description: Properties of the shared folder.
    SharedFolderMetadata:
      allOf:
      - $ref: '#/components/schemas/SharedFolderMetadataBase'
      - type: object
        properties:
          link_metadata:
            $ref: '#/components/schemas/SharedContentLinkMetadata'
          name:
            type: string
          permissions:
            type: array
            items:
              $ref: '#/components/schemas/FolderPermission'
            nullable: true
          policy:
            $ref: '#/components/schemas/FolderPolicy'
          preview_url:
            type: string
          shared_folder_id:
            $ref: '#/components/schemas/SharedFolderId'
          time_invited:
            $ref: '#/components/schemas/DropboxTimestamp'
          access_inheritance:
            $ref: '#/components/schemas/AccessInheritance'
        required:
        - name
        - policy
        - preview_url
        - shared_folder_id
        - time_invited
        - access_inheritance
        description: The metadata which includes basic information about the shared folder.
      description: The metadata which includes basic information about the shared folder.
    MemberAccessLevelResult:
      type: object
      properties:
        access_level:
          $ref: '#/components/schemas/AccessLevel'
        warning:
          type: string
          nullable: true
        access_details:
          type: array
          items:
            $ref: '#/components/schemas/ParentFolderAccessInfo'
          nullable: true
      description: Contains information about a member's access level to content after an operation.
    ParentFolderAccessInfo:
      type: object
      properties:
        folder_name:
          type: string
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/MemberPermission'
        path:
          type: string
      required:
      - folder_name
      - shared_folder_id
      - permissions
      - path
      description: Contains information about a parent folder that a member has access to.
    ListFoldersArgs:
      type: object
      properties:
        limit:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
        actions:
          type: array
          items:
            $ref: '#/components/schemas/FolderAction'
          nullable: true
      required:
      - limit
    ListFoldersResult:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SharedFolderMetadata'
        cursor:
          type: string
          nullable: true
      required:
      - entries
      description: |-
        Result for :route:`list_folders` or :route:`list_mountable_folders`, depending on which
            endpoint was requested.

            Unmounted shared folders can be identified by the absence of
            :field:`SharedFolderMetadata.path_lower`.
    ListFoldersContinueArg:
      type: object
      properties:
        cursor:
          type: string
      required:
      - cursor
    GetMetadataArgs:
      type: object
      properties:
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/FolderAction'
          nullable: true
      required:
      - shared_folder_id
    ListFolderMembersCursorArg:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/MemberAction'
          nullable: true
        limit:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
      required:
      - limit
    ListFolderMembersArgs:
      allOf:
      - $ref: '#/components/schemas/ListFolderMembersCursorArg'
      - type: object
        properties:
          shared_folder_id:
            $ref: '#/components/schemas/SharedFolderId'
        required:
        - shared_folder_id
    SharedFolderMembers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserMembershipInfo'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupMembershipInfo'
        invitees:
          type: array
          items:
            $ref: '#/components/schemas/InviteeMembershipInfo'
        cursor:
          type: string
          nullable: true
      required:
      - users
      - groups
      - invitees
      description: Shared folder user and group membership.
    ListFolderMembersContinueArg:
      type: object
      properties:
        cursor:
          type: string
      required:
      - cursor
    ShareFolderArgBase:
      type: object
      properties:
        acl_update_policy:
          $ref: '#/components/schemas/AclUpdatePolicy'
        force_async:
          type: boolean
        member_policy:
          $ref: '#/components/schemas/MemberPolicy'
        path:
          $ref: '#/components/schemas/WritePathOrId'
        shared_link_policy:
          $ref: '#/components/schemas/SharedLinkPolicy'
        viewer_info_policy:
          $ref: '#/components/schemas/ViewerInfoPolicy'
        access_inheritance:
          $ref: '#/components/schemas/AccessInheritance'
      required:
      - force_async
      - path
      - access_inheritance
    ShareFolderArg:
      allOf:
      - $ref: '#/components/schemas/ShareFolderArgBase'
      - type: object
        properties:
          actions:
            type: array
            items:
              $ref: '#/components/schemas/FolderAction'
            nullable: true
          link_settings:
            $ref: '#/components/schemas/LinkSettings'
    UnshareFolderArg:
      type: object
      properties:
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        leave_a_copy:
          type: boolean
      required:
      - shared_folder_id
      - leave_a_copy
    TransferFolderArg:
      type: object
      properties:
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        to_dropbox_id:
          $ref: '#/components/schemas/DropboxId'
      required:
      - shared_folder_id
      - to_dropbox_id
    UpdateFolderPolicyArg:
      type: object
      properties:
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        member_policy:
          $ref: '#/components/schemas/MemberPolicy'
        acl_update_policy:
          $ref: '#/components/schemas/AclUpdatePolicy'
        viewer_info_policy:
          $ref: '#/components/schemas/ViewerInfoPolicy'
        shared_link_policy:
          $ref: '#/components/schemas/SharedLinkPolicy'
        link_settings:
          $ref: '#/components/schemas/LinkSettings'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/FolderAction'
          nullable: true
      required:
      - shared_folder_id
      description: If any of the policies are unset, then they retain their current setting.
    AddFolderMemberArg:
      type: object
      properties:
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        members:
          type: array
          items:
            $ref: '#/components/schemas/AddMember'
        quiet:
          type: boolean
        custom_message:
          type: string
          minLength: 1
          nullable: true
      required:
      - shared_folder_id
      - members
      - quiet
    RemoveFolderMemberArg:
      type: object
      properties:
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        member:
          $ref: '#/components/schemas/MemberSelector'
        leave_a_copy:
          type: boolean
      required:
      - shared_folder_id
      - member
      - leave_a_copy
    UpdateFolderMemberArg:
      type: object
      properties:
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        member:
          $ref: '#/components/schemas/MemberSelector'
        access_level:
          $ref: '#/components/schemas/AccessLevel'
      required:
      - shared_folder_id
      - member
      - access_level
    MountFolderArg:
      type: object
      properties:
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
      required:
      - shared_folder_id
    InsufficientQuotaAmounts:
      type: object
      properties:
        space_needed:
          type: integer
          format: int64
        space_shortage:
          type: integer
          format: int64
        space_left:
          type: integer
          format: int64
      required:
      - space_needed
      - space_shortage
      - space_left
    UnmountFolderArg:
      type: object
      properties:
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
      required:
      - shared_folder_id
    RelinquishFolderMembershipArg:
      type: object
      properties:
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
        leave_a_copy:
          type: boolean
      required:
      - shared_folder_id
      - leave_a_copy
    SetAccessInheritanceArg:
      type: object
      properties:
        access_inheritance:
          $ref: '#/components/schemas/AccessInheritance'
        shared_folder_id:
          $ref: '#/components/schemas/SharedFolderId'
      required:
      - access_inheritance
      - shared_folder_id
    AccessLevel:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - owner
          - editor
          - viewer
          - viewer_no_comment
          - traverse
          - no_access
      required:
      - .tag
      description: Defines the access levels for collaborators.
    FolderAction:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - change_options
          - disable_viewer_info
          - edit_contents
          - enable_viewer_info
          - invite_editor
          - invite_viewer
          - invite_viewer_no_comment
          - relinquish_membership
          - unmount
          - unshare
          - leave_a_copy
          - share_link
          - create_link
          - set_access_inheritance
      required:
      - .tag
      description: Actions that may be taken on shared folders.
    MemberPolicy:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - team
          - anyone
      required:
      - .tag
      description: |-
        Policy governing who can be a member of a shared folder. Only applicable
            to folders owned by a user on a team.
    MemberAction:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - leave_a_copy
          - make_editor
          - make_owner
          - make_viewer
          - make_viewer_no_comment
          - remove
      required:
      - .tag
      description: Actions that may be taken on members of a shared folder.
    PermissionDeniedReason:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - user_not_same_team_as_owner
          - user_not_allowed_by_owner
          - target_is_indirect_member
          - target_is_owner
          - target_is_self
          - target_not_active
          - folder_is_limited_team_folder
          - owner_not_on_team
          - permission_denied
          - restricted_by_team
          - user_account_type
          - user_not_on_team
          - folder_is_inside_shared_folder
          - restricted_by_parent_folder
          - insufficient_plan
      required:
      - .tag
      description: Possible reasons the user is denied a permission.
      discriminator:
        propertyName: .tag
        mapping:
          insufficient_plan: '#/components/schemas/InsufficientPlan'
    AclUpdatePolicy:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - owner
          - editors
      required:
      - .tag
      description: |-
        Who can change a shared folder's access control list (ACL). In other words, who can add,
            remove, or change the privileges of members.
    SharedLinkPolicy:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - anyone
          - team
          - members
      required:
      - .tag
      description: Who can view shared links in this folder.
    InviteeInfo:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - email
      required:
      - .tag
      description: Information about the recipient of a shared content invitation.
      discriminator:
        propertyName: .tag
        mapping:
          email: '#/components/schemas/EmailAddress'
    AccessInheritance:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - inherit
          - no_inherit
      required:
      - .tag
      description: Information about the inheritance policy of a shared folder.
    SharedFolderAccessError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_id
          - not_a_member
          - invalid_member
          - email_unverified
          - unmounted
      required:
      - .tag
      description: There is an error accessing the shared folder.
    ListFoldersContinueError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_cursor
      required:
      - .tag
    ListFolderMembersContinueError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - invalid_cursor
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharedFolderAccessError'
    ShareFolderErrorBase:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - email_unverified
          - bad_path
          - team_policy_disallows_member_policy
          - disallowed_shared_link_policy
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          bad_path: '#/components/schemas/SharePathError'
    ShareFolderError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - no_permission
      required:
      - .tag
    SharePathError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - is_file
          - inside_shared_folder
          - contains_shared_folder
          - contains_app_folder
          - contains_team_folder
          - is_app_folder
          - inside_app_folder
          - is_public_folder
          - inside_public_folder
          - already_shared
          - invalid_path
          - is_osx_package
          - inside_osx_package
          - is_vault
          - is_vault_locked
          - is_family
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          already_shared: '#/components/schemas/SharedFolderMetadata'
    ShareFolderJobStatus:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
          - failed
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/SharedFolderMetadata'
          failed: '#/components/schemas/ShareFolderError'
    ShareFolderLaunch:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/SharedFolderMetadata'
    JobStatus:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
          - failed
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          failed: '#/components/schemas/JobError'
    SharedFolderMemberError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - invalid_dropbox_id
          - not_a_member
          - no_explicit_access
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          no_explicit_access: '#/components/schemas/MemberAccessLevelResult'
    JobError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - unshare_folder_error
          - remove_folder_member_error
          - relinquish_folder_membership_error
      required:
      - .tag
      description: |-
        Error occurred while performing an asynchronous job from :route:`unshare_folder`
            or :route:`remove_folder_member`.
      discriminator:
        propertyName: .tag
        mapping:
          unshare_folder_error: '#/components/schemas/UnshareFolderError'
          remove_folder_member_error: '#/components/schemas/RemoveFolderMemberError'
          relinquish_folder_membership_error: '#/components/schemas/RelinquishFolderMembershipError'
    UnshareFolderError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - team_folder
          - no_permission
          - too_many_files
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharedFolderAccessError'
    TransferFolderError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - invalid_dropbox_id
          - new_owner_not_a_member
          - new_owner_unmounted
          - new_owner_email_unverified
          - team_folder
          - no_permission
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharedFolderAccessError'
    UpdateFolderPolicyError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - not_on_team
          - team_policy_disallows_member_policy
          - disallowed_shared_link_policy
          - no_permission
          - team_folder
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharedFolderAccessError'
    MemberSelector:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - dropbox_id
          - email
      required:
      - .tag
      description: Includes different ways to identify a member of a shared folder.
      discriminator:
        propertyName: .tag
        mapping:
          dropbox_id: '#/components/schemas/DropboxId'
          email: '#/components/schemas/EmailAddress'
    AddFolderMemberError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - email_unverified
          - banned_member
          - bad_member
          - cant_share_outside_team
          - too_many_members
          - too_many_pending_invites
          - rate_limit
          - too_many_invitees
          - insufficient_plan
          - team_folder
          - no_permission
          - invalid_shared_folder
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharedFolderAccessError'
          bad_member: '#/components/schemas/AddMemberSelectorError'
          too_many_members: '#/components/schemas/UInt64'
          too_many_pending_invites: '#/components/schemas/UInt64'
    AddMemberSelectorError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - automatic_group
          - invalid_dropbox_id
          - invalid_email
          - unverified_dropbox_id
          - group_deleted
          - group_not_on_team
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          invalid_dropbox_id: '#/components/schemas/DropboxId'
          invalid_email: '#/components/schemas/EmailAddress'
          unverified_dropbox_id: '#/components/schemas/DropboxId'
    RemoveFolderMemberError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - member_error
          - folder_owner
          - group_access
          - team_folder
          - no_permission
          - too_many_files
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharedFolderAccessError'
          member_error: '#/components/schemas/SharedFolderMemberError'
    RemoveMemberJobStatus:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - complete
          - failed
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          complete: '#/components/schemas/MemberAccessLevelResult'
          failed: '#/components/schemas/RemoveFolderMemberError'
    UpdateFolderMemberError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - member_error
          - no_explicit_access
          - insufficient_plan
          - no_permission
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharedFolderAccessError'
          member_error: '#/components/schemas/SharedFolderMemberError'
          no_explicit_access: '#/components/schemas/AddFolderMemberError'
    MountFolderError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - inside_shared_folder
          - insufficient_quota
          - already_mounted
          - no_permission
          - not_mountable
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharedFolderAccessError'
          insufficient_quota: '#/components/schemas/InsufficientQuotaAmounts'
    UnmountFolderError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - no_permission
          - not_unmountable
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharedFolderAccessError'
    RelinquishFolderMembershipError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - folder_owner
          - mounted
          - group_access
          - team_folder
          - no_permission
          - no_explicit_access
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharedFolderAccessError'
    SetAccessInheritanceError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - access_error
          - no_permission
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          access_error: '#/components/schemas/SharedFolderAccessError'
    DropboxId:
      type: string
      minLength: 1
    Route:
      type: object
      properties:
        auth:
          type: string
        host:
          type: string
        style:
          type: string
        is_preview:
          type: boolean
        allow_app_folder_app:
          type: boolean
        select_admin_mode:
          type: string
          nullable: true
        scope:
          type: string
          nullable: true
        is_cloud_doc_auth:
          type: boolean
      required:
      - auth
      - host
      - style
      - is_preview
      - allow_app_folder_app
      - is_cloud_doc_auth
    GetAccountArg:
      type: object
      properties:
        account_id:
          $ref: '#/components/schemas/AccountId'
      required:
      - account_id
    Account:
      type: object
      properties:
        account_id:
          $ref: '#/components/schemas/AccountId'
        name:
          $ref: '#/components/schemas/Name'
        email:
          type: string
        email_verified:
          type: boolean
        profile_photo_url:
          type: string
          nullable: true
        disabled:
          type: boolean
      required:
      - account_id
      - name
      - email
      - email_verified
      - disabled
      description: |-
        The amount of detail revealed about an account depends on the user
            being queried and the user making the query.
    BasicAccount:
      allOf:
      - $ref: '#/components/schemas/Account'
      - type: object
        properties:
          is_teammate:
            type: boolean
          team_member_id:
            type: string
            nullable: true
        required:
        - is_teammate
        description: Basic information about any account.
      description: Basic information about any account.
    FullAccount:
      allOf:
      - $ref: '#/components/schemas/Account'
      - type: object
        properties:
          country:
            type: string
            minLength: 2
            maxLength: 2
            nullable: true
          locale:
            type: string
            minLength: 2
          referral_link:
            type: string
          team:
            $ref: '#/components/schemas/FullTeam'
          team_member_id:
            type: string
            nullable: true
          is_paired:
            type: boolean
          account_type:
            $ref: '#/components/schemas/AccountType'
          root_info:
            $ref: '#/components/schemas/RootInfo'
        required:
        - locale
        - referral_link
        - is_paired
        - account_type
        - root_info
        description: Detailed information about the current user's account.
      description: Detailed information about the current user's account.
    Team:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
      - id
      - name
      description: Information about a team.
    FullTeam:
      allOf:
      - $ref: '#/components/schemas/Team'
      - type: object
        properties:
          sharing_policies:
            $ref: '#/components/schemas/teampoliciesTeamSharingPolicies'
          office_addin_policy:
            $ref: '#/components/schemas/teampoliciesOfficeAddInPolicy'
        required:
        - sharing_policies
        - office_addin_policy
        description: Detailed information about a team.
      description: Detailed information about a team.
    Name:
      type: object
      properties:
        given_name:
          type: string
        surname:
          type: string
        familiar_name:
          type: string
        display_name:
          type: string
        abbreviated_name:
          type: string
      required:
      - given_name
      - surname
      - familiar_name
      - display_name
      - abbreviated_name
      description: Representations for a person's name to assist with internationalization.
    SpaceUsage:
      type: object
      properties:
        used:
          type: integer
          format: int64
        allocation:
          $ref: '#/components/schemas/SpaceAllocation'
      required:
      - used
      - allocation
      description: Information about a user's space usage and quota.
    IndividualSpaceAllocation:
      type: object
      properties:
        allocated:
          type: integer
          format: int64
      required:
      - allocated
    TeamSpaceAllocation:
      type: object
      properties:
        used:
          type: integer
          format: int64
        allocated:
          type: integer
          format: int64
        user_within_team_space_allocated:
          type: integer
          format: int64
        user_within_team_space_limit_type:
          $ref: '#/components/schemas/teamcommonMemberSpaceLimitType'
        user_within_team_space_used_cached:
          type: integer
          format: int64
      required:
      - used
      - allocated
      - user_within_team_space_allocated
      - user_within_team_space_limit_type
      - user_within_team_space_used_cached
    GetAccountBatchArg:
      type: object
      properties:
        account_ids:
          type: array
          items:
            $ref: '#/components/schemas/AccountId'
      required:
      - account_ids
    UserFeaturesGetValuesBatchArg:
      type: object
      properties:
        features:
          type: array
          items:
            $ref: '#/components/schemas/UserFeature'
      required:
      - features
    UserFeaturesGetValuesBatchResult:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/UserFeatureValue'
      required:
      - values
    GetAccountError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - no_account
      required:
      - .tag
    SpaceAllocation:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - individual
          - team
      required:
      - .tag
      description: Space is allocated differently based on the type of account.
      discriminator:
        propertyName: .tag
        mapping:
          individual: '#/components/schemas/IndividualSpaceAllocation'
          team: '#/components/schemas/TeamSpaceAllocation'
    GetAccountBatchError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - no_account
      required:
      - .tag
      discriminator:
        propertyName: .tag
        mapping:
          no_account: '#/components/schemas/AccountId'
    UserFeature:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - paper_as_files
          - file_locking
      required:
      - .tag
      description: A set of features that a Dropbox User account may have configured.
    UserFeatureValue:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - paper_as_files
          - file_locking
      required:
      - .tag
      description: Values that correspond to entries in :type:`UserFeature`.
      discriminator:
        propertyName: .tag
        mapping:
          paper_as_files: '#/components/schemas/PaperAsFilesValue'
          file_locking: '#/components/schemas/FileLockingValue'
    PaperAsFilesValue:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - enabled
      required:
      - .tag
      description: 'The value for :field:`UserFeature.paper_as_files`.  '
      discriminator:
        propertyName: .tag
        mapping:
          enabled: '#/components/schemas/Boolean'
    FileLockingValue:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - enabled
      required:
      - .tag
      description: 'The value for :field:`UserFeature.file_locking`.  '
      discriminator:
        propertyName: .tag
        mapping:
          enabled: '#/components/schemas/Boolean'
    UserFeaturesGetValuesBatchError:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - empty_features_list
      required:
      - .tag
    GetAccountBatchResult:
      type: array
      items:
        $ref: '#/components/schemas/BasicAccount'
    AccountType:
      type: object
      properties:
        .tag:
          type: string
          enum:
          - basic
          - pro
          - business
      required:
      - .tag
      description: What type of account this user has.
    AccountId:
      type: string
      minLength: 40
      maxLength: 40
